CCS PCM C Compiler, Version 5.015, 5967               01-oct.-24 14:52

               Filename:   C:\Users\JHON GARCIA\Desktop\Sistema_Acceso\AccessRFID_System\RFID Acceso\RFID Acceso.lst

               ROM used:   1364 words (17%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           55 (15%) worst case
               Stack used: 7 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4F8
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,00
000D:  DATA 49,22
000E:  DATA 3A,10
000F:  DATA 00,01
0010:  DATA C2,34
0011:  DATA 65,37
0012:  DATA F6,32
0013:  DATA EE,34
0014:  DATA E4,37
0015:  DATA A0,30
0016:  DATA A0,22
0017:  DATA 73,3A
0018:  DATA F2,3A
0019:  DATA 63,3A
001A:  DATA 75,39
001B:  DATA E1,39
001C:  DATA 00,00
001D:  DATA C1,31
001E:  DATA E3,32
001F:  DATA F3,37
0020:  DATA 20,22
0021:  DATA 65,37
0022:  DATA E5,33
0023:  DATA 61,32
0024:  DATA 6F,00
0025:  DATA 49,22
0026:  DATA 45,27
0027:  DATA D4,24
0028:  DATA C6,24
0029:  DATA D1,2A
002A:  DATA C5,29
002B:  DATA 45,00
*
020C:  MOVF   0B,W
020D:  MOVWF  33
020E:  BCF    0B.7
020F:  BSF    03.5
0210:  BSF    03.6
0211:  BSF    0C.7
0212:  BSF    0C.0
0213:  NOP
0214:  NOP
0215:  BCF    03.5
0216:  BCF    03.6
0217:  BTFSC  33.7
0218:  BSF    0B.7
0219:  BSF    03.6
021A:  MOVF   0C,W
021B:  ANDLW  7F
021C:  BTFSC  03.2
021D:  GOTO   260
021E:  BCF    03.6
021F:  MOVWF  33
0220:  BSF    03.6
0221:  MOVF   0D,W
0222:  BCF    03.6
0223:  MOVWF  34
0224:  BSF    03.6
0225:  MOVF   0F,W
0226:  BCF    03.6
0227:  MOVWF  35
0228:  MOVF   33,W
0229:  MOVWF  36
022A:  CALL   1E8
022B:  MOVF   34,W
022C:  BSF    03.6
022D:  MOVWF  0D
022E:  BCF    03.6
022F:  MOVF   35,W
0230:  BSF    03.6
0231:  MOVWF  0F
0232:  BCF    03.6
0233:  MOVF   0B,W
0234:  MOVWF  36
0235:  BCF    0B.7
0236:  BSF    03.5
0237:  BSF    03.6
0238:  BSF    0C.7
0239:  BSF    0C.0
023A:  NOP
023B:  NOP
023C:  BCF    03.5
023D:  BCF    03.6
023E:  BTFSC  36.7
023F:  BSF    0B.7
0240:  BSF    03.6
0241:  RLF    0C,W
0242:  RLF    0E,W
0243:  ANDLW  7F
0244:  BTFSC  03.2
0245:  GOTO   260
0246:  BCF    03.6
0247:  MOVWF  33
0248:  BSF    03.6
0249:  MOVF   0D,W
024A:  BCF    03.6
024B:  MOVWF  34
024C:  BSF    03.6
024D:  MOVF   0F,W
024E:  BCF    03.6
024F:  MOVWF  35
0250:  MOVF   33,W
0251:  MOVWF  36
0252:  CALL   1E8
0253:  MOVF   34,W
0254:  BSF    03.6
0255:  MOVWF  0D
0256:  BCF    03.6
0257:  MOVF   35,W
0258:  BSF    03.6
0259:  MOVWF  0F
025A:  INCF   0D,F
025B:  BTFSC  03.2
025C:  INCF   0F,F
025D:  BCF    03.6
025E:  GOTO   20C
025F:  BSF    03.6
0260:  BCF    03.6
0261:  RETURN
*
0402:  BTFSC  35.7
0403:  GOTO   414
0404:  MOVLW  0F
0405:  MOVWF  77
0406:  SWAPF  34,W
0407:  ANDWF  77,F
0408:  MOVLW  0A
0409:  SUBWF  77,W
040A:  BTFSC  03.0
040B:  GOTO   40F
040C:  MOVLW  30
040D:  ADDWF  77,F
040E:  GOTO   411
040F:  MOVF   35,W
0410:  ADDWF  77,F
0411:  MOVF   77,W
0412:  MOVWF  36
0413:  CALL   1E8
0414:  MOVLW  0F
0415:  ANDWF  34,F
0416:  MOVLW  0A
0417:  SUBWF  34,W
0418:  BTFSC  03.0
0419:  GOTO   41C
041A:  MOVLW  30
041B:  GOTO   41E
041C:  BCF    35.7
041D:  MOVF   35,W
041E:  ADDWF  34,F
041F:  MOVF   34,W
0420:  MOVWF  36
0421:  CALL   1E8
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOPUT,NOLVP,NOBROWNOUT 
.................... #use delay(clock=20M) 
*
002C:  MOVLW  37
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   03F
0032:  MOVLW  06
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  7B
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 00,F
003E:  GOTO   032
003F:  RETURN
.................... #use standard_io(A) 
.................... #use standard_io(D) 
.................... #use standard_io(B) 
....................  
.................... //led acceso --> salida 
.................... #define led_access PIN_B0                        
.................... #define led_error PIN_B1 
.................... #define led_conf PIN_B5 
....................  
.................... //pines salida --> pantalla lcd 
.................... #define LCD_DB4   PIN_D4                         
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
.................... #define LCD_RS    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
.................... // pines entrada --> RFID (comunicación spi) 
.................... #define MFRC522_CS  PIN_A0                      
.................... #define MFRC522_SCK PIN_A1                      
.................... #define MFRC522_SI  PIN_A2                      
.................... #define MFRC522_SO  PIN_A3                      
.................... #define MFRC522_RST PIN_A4                      
.................... #include <RC522.h>                               
.................... #define PCD_IDLE              0x00               //NO action; Cancel the current command 
.................... #define PCD_AUTHENT           0x0E               //Authentication Key 
.................... #define PCD_RECEIVE           0x08               //Receive Data 
.................... #define PCD_TRANSMIT          0x04               //Transmit data 
.................... #define PCD_TRANSCEIVE        0x0C               //Transmit and receive data, 
.................... #define PCD_RESETPHASE        0x0F               //Reset 
.................... #define PCD_CALCCRC           0x03               //CRC Calculate 
....................  
.................... #define PICC_REQIDL          0x26               // find the antenna area does not enter hibernation 
.................... #define PICC_REQALL          0x52               // find all the cards antenna area 
.................... #define PICC_ANTICOLL        0x93               // anti-collision 
.................... #define PICC_SElECTTAG       0x93               // election card 
.................... #define PICC_AUTHENT1A       0x60               // authentication key A 
.................... #define PICC_AUTHENT1B       0x61               // authentication key B 
.................... #define PICC_READ            0x30               // Read Block 
.................... #define PICC_WRITE           0xA0               // write block 
.................... #define PICC_DECREMENT       0xC0               // debit 
.................... #define PICC_INCREMENT       0xC1               // recharge 
.................... #define PICC_RESTORE         0xC2               // transfer block data to the buffer 
.................... #define PICC_TRANSFER        0xB0               // save the data in the buffer 
.................... #define PICC_HALT            0x50               // Sleep 
....................  
.................... #define MI_OK                 0 
.................... #define MI_NOTAGERR           1 
.................... #define MI_ERR                2 
.................... //------------------MFRC522 Register--------------- 
....................  
.................... #define     RESERVED00            0x00    
.................... #define     COMMANDREG            0x01    
.................... #define     COMMIENREG            0x02    
.................... #define     DIVLENREG             0x03    
.................... #define     COMMIRQREG            0x04    
.................... #define     DIVIRQREG             0x05 
.................... #define     ERRORREG              0x06    
.................... #define     STATUS1REG            0x07    
.................... #define     STATUS2REG            0x08    
.................... #define     FIFODATAREG           0x09 
.................... #define     FIFOLEVELREG          0x0A 
.................... #define     WATERLEVELREG         0x0B 
.................... #define     CONTROLREG            0x0C 
.................... #define     BITFRAMINGREG         0x0D 
.................... #define     COLLREG               0x0E 
.................... #define     RESERVED01            0x0F 
.................... //PAGE 1:Command     
.................... #define     RESERVED10            0x10 
.................... #define     MODEREG               0x11 
.................... #define     TXMODEREG             0x12 
.................... #define     RXMODEREG             0x13 
.................... #define     TXCONTROLREG          0x14 
.................... #define     TXAUTOREG             0x15 
.................... #define     TXSELREG              0x16 
.................... #define     RXSELREG              0x17 
.................... #define     RXTHRESHOLDREG        0x18 
.................... #define     DEMODREG              0x19 
.................... #define     RESERVED11            0x1A 
.................... #define     RESERVED12            0x1B 
.................... #define     MIFAREREG             0x1C 
.................... #define     RESERVED13            0x1D 
.................... #define     RESERVED14            0x1E 
.................... #define     SERIALSPEEDREG        0x1F 
.................... //PAGE 2:CFG    
.................... #define     RESERVED20            0x20  
.................... #define     CRCRESULTREGM         0x21 
.................... #define     CRCRESULTREGL         0x22 
.................... #define     RESERVED21            0x23 
.................... #define     MODWIDTHREG           0x24 
.................... #define     RESERVED22            0x25 
.................... #define     RFCFGREG              0x26 
.................... #define     GSNREG                0x27 
.................... #define     CWGSPREG              0x28 
.................... #define     MODGSPREG             0x29 
.................... #define     TMODEREG              0x2A 
.................... #define     TPRESCALERREG         0x2B 
.................... #define     TRELOADREGH           0x2C 
.................... #define     TRELOADREGL           0x2D 
.................... #define     TCOUNTERVALUEREGH     0x2E 
.................... #define     TCOUNTERVALUEREGL     0x2F 
.................... //PAGE 3:TEST REGISTER     
.................... #define     RESERVED30            0x30 
.................... #define     TESTSEL1REG           0x31 
.................... #define     TESTSEL2REG           0x32 
.................... #define     TESTPINENREG          0x33 
.................... #define     TESTPINVALUEREG       0x34 
.................... #define     TESTBUSREG            0x35 
.................... #define     AUTOTESTREG           0x36 
.................... #define     VERSIONREG            0x37 
.................... #define     ANALOGTESTREG         0x38 
.................... #define     TESTDAC1REG           0x39  
.................... #define     TESTDAC2REG           0x3A   
.................... #define     TESTADCREG            0x3B   
.................... #define     RESERVED31            0x3C   
.................... #define     RESERVED32            0x3D   
.................... #define     RESERVED33            0x3E   
.................... #define     RESERVED34            0x3F 
....................  
.................... unsigned int8 MFRC522_Rd(unsigned int8 Address)  
*
00E2:  CLRF   4F
.................... { 
....................    unsigned int i, ucAddr; 
....................    unsigned int ucResult = 0; 
....................    output_bit (MFRC522_SCK, 0); 
00E3:  BCF    05.1
00E4:  BSF    03.5
00E5:  BCF    05.1
....................    output_bit (MFRC522_CS, 0); 
00E6:  BCF    03.5
00E7:  BCF    05.0
00E8:  BSF    03.5
00E9:  BCF    05.0
....................    ucAddr = ( (Address<<1)&0x7E)|0x80; 
00EA:  BCF    03.0
00EB:  BCF    03.5
00EC:  RLF    4C,W
00ED:  ANDLW  7E
00EE:  IORLW  80
00EF:  MOVWF  4E
....................  
....................    FOR (i = 8; i > 0; i--) 
00F0:  MOVLW  08
00F1:  MOVWF  4D
00F2:  MOVF   4D,F
00F3:  BTFSC  03.2
00F4:  GOTO   10C
....................    { 
....................       output_bit (MFRC522_SI, ((ucAddr&0x80) == 0x80)); 
00F5:  MOVF   4E,W
00F6:  ANDLW  80
00F7:  SUBLW  80
00F8:  BTFSC  03.2
00F9:  GOTO   0FC
00FA:  BCF    05.2
00FB:  GOTO   0FD
00FC:  BSF    05.2
00FD:  BSF    03.5
00FE:  BCF    05.2
....................       output_bit (MFRC522_SCK, 1); 
00FF:  BCF    03.5
0100:  BSF    05.1
0101:  BSF    03.5
0102:  BCF    05.1
....................       ucAddr <<= 1; 
0103:  BCF    03.0
0104:  BCF    03.5
0105:  RLF    4E,F
....................       output_bit (MFRC522_SCK, 0); 
0106:  BCF    05.1
0107:  BSF    03.5
0108:  BCF    05.1
0109:  BCF    03.5
010A:  DECF   4D,F
010B:  GOTO   0F2
....................    } 
....................  
....................    FOR (i = 8; i > 0; i--) 
010C:  MOVLW  08
010D:  MOVWF  4D
010E:  MOVF   4D,F
010F:  BTFSC  03.2
0110:  GOTO   124
....................    { 
....................       output_bit (MFRC522_SCK, 1); 
0111:  BSF    05.1
0112:  BSF    03.5
0113:  BCF    05.1
....................       ucResult <<= 1; 
0114:  BCF    03.0
0115:  BCF    03.5
0116:  RLF    4F,F
....................       ucResult|= (INT1) input (MFRC522_SO); 
0117:  BSF    03.5
0118:  BSF    05.3
0119:  MOVLW  00
011A:  BCF    03.5
011B:  BTFSC  05.3
011C:  MOVLW  01
011D:  IORWF  4F,F
....................       output_bit (MFRC522_SCK, 0); 
011E:  BCF    05.1
011F:  BSF    03.5
0120:  BCF    05.1
0121:  BCF    03.5
0122:  DECF   4D,F
0123:  GOTO   10E
....................    } 
....................  
....................    
....................    output_bit (MFRC522_CS, 1); 
0124:  BSF    05.0
0125:  BSF    03.5
0126:  BCF    05.0
....................    output_bit (MFRC522_SCK, 1); 
0127:  BCF    03.5
0128:  BSF    05.1
0129:  BSF    03.5
012A:  BCF    05.1
....................    RETURN ucResult; 
012B:  BCF    03.5
012C:  MOVF   4F,W
012D:  MOVWF  78
012E:  RETURN
.................... } 
....................  
.................... void MFRC522_Wr(unsigned int8 Address, unsigned int8 value) 
.................... { 
....................    
....................    unsigned int8 i, ucAddr; 
....................    output_bit (MFRC522_SCK, 0); 
*
0095:  BCF    05.1
0096:  BSF    03.5
0097:  BCF    05.1
....................    output_bit (MFRC522_CS, 0); 
0098:  BCF    03.5
0099:  BCF    05.0
009A:  BSF    03.5
009B:  BCF    05.0
....................    ucAddr = ( (Address<<1)&0x7E); 
009C:  BCF    03.0
009D:  BCF    03.5
009E:  RLF    4D,W
009F:  ANDLW  7E
00A0:  MOVWF  50
....................    FOR (i = 8; i > 0; i--) 
00A1:  MOVLW  08
00A2:  MOVWF  4F
00A3:  MOVF   4F,F
00A4:  BTFSC  03.2
00A5:  GOTO   0BD
....................    { 
....................       output_bit (MFRC522_SI, ( (ucAddr&0x80) == 0x80)); 
00A6:  MOVF   50,W
00A7:  ANDLW  80
00A8:  SUBLW  80
00A9:  BTFSC  03.2
00AA:  GOTO   0AD
00AB:  BCF    05.2
00AC:  GOTO   0AE
00AD:  BSF    05.2
00AE:  BSF    03.5
00AF:  BCF    05.2
....................       output_bit (MFRC522_SCK, 1); 
00B0:  BCF    03.5
00B1:  BSF    05.1
00B2:  BSF    03.5
00B3:  BCF    05.1
....................       ucAddr <<= 1; 
00B4:  BCF    03.0
00B5:  BCF    03.5
00B6:  RLF    50,F
....................       output_bit (MFRC522_SCK, 0); 
00B7:  BCF    05.1
00B8:  BSF    03.5
00B9:  BCF    05.1
00BA:  BCF    03.5
00BB:  DECF   4F,F
00BC:  GOTO   0A3
....................    } 
....................  
....................    
....................    FOR (i = 8; i > 0; i--) 
00BD:  MOVLW  08
00BE:  MOVWF  4F
00BF:  MOVF   4F,F
00C0:  BTFSC  03.2
00C1:  GOTO   0D9
....................    { 
....................       output_bit (MFRC522_SI, ( (value&0x80) == 0x80)); 
00C2:  MOVF   4E,W
00C3:  ANDLW  80
00C4:  SUBLW  80
00C5:  BTFSC  03.2
00C6:  GOTO   0C9
00C7:  BCF    05.2
00C8:  GOTO   0CA
00C9:  BSF    05.2
00CA:  BSF    03.5
00CB:  BCF    05.2
....................       output_bit (MFRC522_SCK, 1); 
00CC:  BCF    03.5
00CD:  BSF    05.1
00CE:  BSF    03.5
00CF:  BCF    05.1
....................       value <<= 1; 
00D0:  BCF    03.0
00D1:  BCF    03.5
00D2:  RLF    4E,F
....................       output_bit (MFRC522_SCK, 0); 
00D3:  BCF    05.1
00D4:  BSF    03.5
00D5:  BCF    05.1
00D6:  BCF    03.5
00D7:  DECF   4F,F
00D8:  GOTO   0BF
....................    } 
....................  
....................    output_bit (MFRC522_CS, 1); 
00D9:  BSF    05.0
00DA:  BSF    03.5
00DB:  BCF    05.0
....................    output_bit (MFRC522_SCK, 1); 
00DC:  BCF    03.5
00DD:  BSF    05.1
00DE:  BSF    03.5
00DF:  BCF    05.1
00E0:  BCF    03.5
00E1:  RETURN
.................... } 
.................... static void MFRC522_Clear_Bit( char addr, char mask ) 
*
012F:  CLRF   4B
.................... {     unsigned int8  tmp =0x0; 
....................       tmp=MFRC522_Rd( addr ) ; 
0130:  MOVF   49,W
0131:  MOVWF  4C
0132:  CALL   0E2
0133:  MOVF   78,W
0134:  MOVWF  4B
....................      MFRC522_Wr( addr,  tmp&~mask );    
0135:  MOVF   4A,W
0136:  XORLW  FF
0137:  ANDWF  4B,W
0138:  MOVWF  4C
0139:  MOVF   49,W
013A:  MOVWF  4D
013B:  MOVF   4C,W
013C:  MOVWF  4E
013D:  CALL   095
013E:  RETURN
.................... } 
.................... static void MFRC522_Set_Bit( char addr, char mask ) 
013F:  CLRF   4B
.................... {    unsigned int8  tmp =0x0; 
....................       tmp=MFRC522_Rd( addr ) ;  
0140:  MOVF   49,W
0141:  MOVWF  4C
0142:  CALL   0E2
0143:  MOVF   78,W
0144:  MOVWF  4B
....................      MFRC522_Wr( addr, tmp|mask ); 
0145:  MOVF   4B,W
0146:  IORWF  4A,W
0147:  MOVWF  4C
0148:  MOVF   49,W
0149:  MOVWF  4D
014A:  MOVF   4C,W
014B:  MOVWF  4E
014C:  CALL   095
014D:  RETURN
.................... } 
.................... void MFRC522_Reset() 
.................... {  
....................    output_bit (MFRC522_RST, 1) ; 
*
0189:  BCF    03.5
018A:  BSF    05.4
018B:  BSF    03.5
018C:  BCF    05.4
....................    delay_us (1); 
018D:  GOTO   18E
018E:  GOTO   18F
018F:  NOP
....................    output_bit (MFRC522_RST, 0) ; 
0190:  BCF    03.5
0191:  BCF    05.4
0192:  BSF    03.5
0193:  BCF    05.4
....................    delay_us (1); 
0194:  GOTO   195
0195:  GOTO   196
0196:  NOP
....................    output_bit (MFRC522_RST, 1) ; 
0197:  BCF    03.5
0198:  BSF    05.4
0199:  BSF    03.5
019A:  BCF    05.4
....................    delay_us (1); 
019B:  GOTO   19C
019C:  GOTO   19D
019D:  NOP
....................    MFRC522_Wr( COMMANDREG, PCD_RESETPHASE ); 
019E:  MOVLW  01
019F:  BCF    03.5
01A0:  MOVWF  4D
01A1:  MOVLW  0F
01A2:  MOVWF  4E
01A3:  CALL   095
....................    delay_us (1); 
01A4:  GOTO   1A5
01A5:  GOTO   1A6
01A6:  NOP
.................... } 
.................... void MFRC522_AntennaOn() 
.................... {                                               
.................... unsigned int8 stt; 
.................... stt= MFRC522_Rd( TXCONTROLREG ) ; 
*
01C9:  MOVLW  14
01CA:  MOVWF  4C
01CB:  CALL   0E2
01CC:  MOVF   78,W
01CD:  MOVWF  32
.................... MFRC522_Set_Bit( TXCONTROLREG, 0x03 ); 
01CE:  MOVLW  14
01CF:  MOVWF  49
01D0:  MOVLW  03
01D1:  MOVWF  4A
01D2:  CALL   13F
.................... } 
.................... void MFRC522_AntennaOff() 
.................... { 
.................... MFRC522_Clear_Bit( TXCONTROLREG, 0x03 );                                           
*
01C4:  MOVLW  14
01C5:  MOVWF  49
01C6:  MOVLW  03
01C7:  MOVWF  4A
01C8:  CALL   12F
.................... } 
.................... void MFRC522_Init()      
.................... { 
....................                                                               
....................     output_bit(MFRC522_CS , 1);  
*
0182:  BSF    05.0
0183:  BSF    03.5
0184:  BCF    05.0
....................     output_bit( MFRC522_RST , 1); 
0185:  BCF    03.5
0186:  BSF    05.4
0187:  BSF    03.5
0188:  BCF    05.4
....................     
....................      MFRC522_Reset();        
....................      MFRC522_Wr( TMODEREG, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler 
*
01A7:  MOVLW  2A
01A8:  MOVWF  4D
01A9:  MOVLW  8D
01AA:  MOVWF  4E
01AB:  CALL   095
....................      MFRC522_Wr( TPRESCALERREG, 0x3E ); //TModeReg[3..0] + TPrescalerReg 
01AC:  MOVLW  2B
01AD:  MOVWF  4D
01AE:  MOVLW  3E
01AF:  MOVWF  4E
01B0:  CALL   095
....................      MFRC522_Wr( TRELOADREGL, 30 ); 
01B1:  MOVLW  2D
01B2:  MOVWF  4D
01B3:  MOVLW  1E
01B4:  MOVWF  4E
01B5:  CALL   095
....................      MFRC522_Wr( TRELOADREGH, 0 );  
01B6:  MOVLW  2C
01B7:  MOVWF  4D
01B8:  CLRF   4E
01B9:  CALL   095
....................      MFRC522_Wr( TXAUTOREG, 0x40 );    //100%ASK 
01BA:  MOVLW  15
01BB:  MOVWF  4D
01BC:  MOVLW  40
01BD:  MOVWF  4E
01BE:  CALL   095
....................      MFRC522_Wr( MODEREG, 0x3D );      // CRC valor inicial de 0x6363 
01BF:  MOVLW  11
01C0:  MOVWF  4D
01C1:  MOVLW  3D
01C2:  MOVWF  4E
01C3:  CALL   095
....................         
....................    
....................      MFRC522_AntennaOff() ;             
....................      MFRC522_AntennaOn(); 
.................... } 
.................... char MFRC522_ToCard( char command, char *sendData, char sendLen, char *backData, unsigned *backLen ) 
*
0262:  MOVLW  02
0263:  MOVWF  43
0264:  CLRF   44
0265:  CLRF   45
.................... { 
....................   char _status = MI_ERR; 
....................   char irqEn = 0x00; 
....................   char waitIRq = 0x00;                
....................   char lastBits; 
....................   char n; 
....................   unsigned i; 
....................   
....................   switch (command) 
0266:  MOVF   3B,W
0267:  XORLW  0E
0268:  BTFSC  03.2
0269:  GOTO   26E
026A:  XORLW  02
026B:  BTFSC  03.2
026C:  GOTO   273
026D:  GOTO   278
....................   { 
....................     case PCD_AUTHENT:       //Certification cards close 
....................     { 
....................       irqEn = 0x12; 
026E:  MOVLW  12
026F:  MOVWF  44
....................       waitIRq = 0x10; 
0270:  MOVLW  10
0271:  MOVWF  45
....................       break; 
0272:  GOTO   278
....................     } 
....................     case PCD_TRANSCEIVE:    //Transmit FIFO data 
....................     { 
....................       irqEn = 0x77; 
0273:  MOVLW  77
0274:  MOVWF  44
....................       waitIRq = 0x30; 
0275:  MOVLW  30
0276:  MOVWF  45
....................       break; 
0277:  GOTO   278
....................     } 
....................     default: 
....................       break; 
....................   } 
....................   MFRC522_Wr( COMMIENREG, irqEn | 0x80 );  //Interrupt request 
0278:  MOVF   44,W
0279:  IORLW  80
027A:  MOVWF  49
027B:  MOVLW  02
027C:  MOVWF  4D
027D:  MOVF   49,W
027E:  MOVWF  4E
027F:  CALL   095
....................   MFRC522_Clear_Bit( COMMIRQREG, 0x80 );   //Clear all interrupt request bit 
0280:  MOVLW  04
0281:  MOVWF  49
0282:  MOVLW  80
0283:  MOVWF  4A
0284:  CALL   12F
....................   MFRC522_Set_Bit( FIFOLEVELREG, 0x80 );   //FlushBuffer=1, FIFO Initialization 
0285:  MOVLW  0A
0286:  MOVWF  49
0287:  MOVLW  80
0288:  MOVWF  4A
0289:  CALL   13F
....................   MFRC522_Wr( COMMANDREG, PCD_IDLE );      //NO action; Cancel the current command??? 
028A:  MOVLW  01
028B:  MOVWF  4D
028C:  CLRF   4E
028D:  CALL   095
....................   
....................   
....................   
....................   
....................   for ( i=0; i < sendLen; i++ ) 
028E:  CLRF   48
028F:  MOVF   3E,W
0290:  SUBWF  48,W
0291:  BTFSC  03.0
0292:  GOTO   2A2
....................   { 
....................     MFRC522_Wr( FIFODATAREG, sendData[i] ); 
0293:  MOVF   48,W
0294:  ADDWF  3C,W
0295:  MOVWF  04
0296:  BCF    03.7
0297:  BTFSC  3D.0
0298:  BSF    03.7
0299:  MOVF   00,W
029A:  MOVWF  49
029B:  MOVLW  09
029C:  MOVWF  4D
029D:  MOVF   49,W
029E:  MOVWF  4E
029F:  CALL   095
02A0:  INCF   48,F
02A1:  GOTO   28F
....................   } 
....................   
....................   MFRC522_Wr( COMMANDREG, command ); 
02A2:  MOVLW  01
02A3:  MOVWF  4D
02A4:  MOVF   3B,W
02A5:  MOVWF  4E
02A6:  CALL   095
....................   if (command == PCD_TRANSCEIVE ) 
02A7:  MOVF   3B,W
02A8:  SUBLW  0C
02A9:  BTFSS  03.2
02AA:  GOTO   2B0
....................   { 
....................     MFRC522_Set_Bit( BITFRAMINGREG, 0x80 ); //StartSend=1,transmission of data starts  
02AB:  MOVLW  0D
02AC:  MOVWF  49
02AD:  MOVLW  80
02AE:  MOVWF  4A
02AF:  CALL   13F
....................   } 
....................   
....................   i = 0xFFFF;   
02B0:  MOVLW  FF
02B1:  MOVWF  48
....................   do 
....................   { 
....................   
....................     n = MFRC522_Rd( COMMIRQREG ); 
02B2:  MOVLW  04
02B3:  MOVWF  4C
02B4:  CALL   0E2
02B5:  MOVF   78,W
02B6:  MOVWF  47
....................     i--; 
02B7:  DECF   48,F
....................   } 
....................   while ( i && !(n & 0x01) && !( n & waitIRq ) ); 
02B8:  MOVF   48,F
02B9:  BTFSC  03.2
02BA:  GOTO   2C1
02BB:  BTFSC  47.0
02BC:  GOTO   2C1
02BD:  MOVF   47,W
02BE:  ANDWF  45,W
02BF:  BTFSC  03.2
02C0:  GOTO   2B2
....................   MFRC522_Clear_Bit( BITFRAMINGREG, 0x80 );    
02C1:  MOVLW  0D
02C2:  MOVWF  49
02C3:  MOVLW  80
02C4:  MOVWF  4A
02C5:  CALL   12F
....................   if (i != 0) 
02C6:  MOVF   48,F
02C7:  BTFSC  03.2
02C8:  GOTO   339
....................   { 
....................     if( !( MFRC522_Rd( ERRORREG ) & 0x1B ) ) 
02C9:  MOVLW  06
02CA:  MOVWF  4C
02CB:  CALL   0E2
02CC:  MOVF   78,W
02CD:  ANDLW  1B
02CE:  BTFSS  03.2
02CF:  GOTO   337
....................     { 
....................       _status = MI_OK; 
02D0:  CLRF   43
....................       if ( n & irqEn & 0x01 ) 
02D1:  MOVF   47,W
02D2:  ANDWF  44,W
02D3:  ANDLW  01
02D4:  BTFSC  03.2
02D5:  GOTO   2D8
....................       { 
....................         _status = MI_NOTAGERR;       
02D6:  MOVLW  01
02D7:  MOVWF  43
....................       } 
....................       if ( command == PCD_TRANSCEIVE ) 
02D8:  MOVF   3B,W
02D9:  SUBLW  0C
02DA:  BTFSS  03.2
02DB:  GOTO   336
....................       { 
....................         n = MFRC522_Rd( FIFOLEVELREG ); 
02DC:  MOVLW  0A
02DD:  MOVWF  4C
02DE:  CALL   0E2
02DF:  MOVF   78,W
02E0:  MOVWF  47
....................         lastBits = MFRC522_Rd( CONTROLREG ) & 0x07; 
02E1:  MOVLW  0C
02E2:  MOVWF  4C
02E3:  CALL   0E2
02E4:  MOVF   78,W
02E5:  ANDLW  07
02E6:  MOVWF  46
....................         if (lastBits) 
02E7:  MOVF   46,F
02E8:  BTFSC  03.2
02E9:  GOTO   2FB
....................         { 
....................           *backLen = (n-1) * 8 + lastBits; 
02EA:  MOVF   41,W
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  BTFSC  42.0
02EE:  BSF    03.7
02EF:  MOVLW  01
02F0:  SUBWF  47,W
02F1:  MOVWF  77
02F2:  RLF    77,F
02F3:  RLF    77,F
02F4:  RLF    77,F
02F5:  MOVLW  F8
02F6:  ANDWF  77,F
02F7:  MOVF   77,W
02F8:  ADDWF  46,W
02F9:  MOVWF  00
....................         } 
02FA:  GOTO   308
....................         else 
....................         { 
....................           *backLen = n * 8; 
02FB:  MOVF   41,W
02FC:  MOVWF  04
02FD:  BCF    03.7
02FE:  BTFSC  42.0
02FF:  BSF    03.7
0300:  RLF    47,W
0301:  MOVWF  77
0302:  RLF    77,F
0303:  RLF    77,F
0304:  MOVLW  F8
0305:  ANDWF  77,F
0306:  MOVF   77,W
0307:  MOVWF  00
....................         } 
....................         if (n == 0) 
0308:  MOVF   47,F
0309:  BTFSS  03.2
030A:  GOTO   30D
....................         { 
....................           n = 1; 
030B:  MOVLW  01
030C:  MOVWF  47
....................         } 
....................         if (n > 16) 
030D:  MOVF   47,W
030E:  SUBLW  10
030F:  BTFSC  03.0
0310:  GOTO   313
....................         { 
....................           n = 16; 
0311:  MOVLW  10
0312:  MOVWF  47
....................         } 
....................        
....................         for (i=0; i < n; i++) 
0313:  CLRF   48
0314:  MOVF   47,W
0315:  SUBWF  48,W
0316:  BTFSC  03.0
0317:  GOTO   32F
....................         { 
....................           backData[i] = MFRC522_Rd( FIFODATAREG ); 
0318:  MOVF   48,W
0319:  ADDWF  3F,W
031A:  MOVWF  78
031B:  MOVF   40,W
031C:  MOVWF  7A
031D:  BTFSC  03.0
031E:  INCF   7A,F
031F:  MOVF   78,W
0320:  MOVWF  49
0321:  MOVF   7A,W
0322:  MOVWF  4A
0323:  MOVLW  09
0324:  MOVWF  4C
0325:  CALL   0E2
0326:  MOVF   49,W
0327:  MOVWF  04
0328:  BCF    03.7
0329:  BTFSC  4A.0
032A:  BSF    03.7
032B:  MOVF   78,W
032C:  MOVWF  00
032D:  INCF   48,F
032E:  GOTO   314
....................         } 
....................   
....................   backData[i] = 0; 
032F:  MOVF   48,W
0330:  ADDWF  3F,W
0331:  MOVWF  04
0332:  BCF    03.7
0333:  BTFSC  40.0
0334:  BSF    03.7
0335:  CLRF   00
....................       } 
....................     } 
0336:  GOTO   339
....................     else 
....................     { 
....................       _status = MI_ERR; 
0337:  MOVLW  02
0338:  MOVWF  43
....................     } 
....................   } 
....................   
....................   return _status; 
0339:  MOVF   43,W
033A:  MOVWF  78
033B:  RETURN
.................... } 
.................... char MFRC522_Request( char reqMode, char *TagType ) 
.................... { 
....................   char _status; 
....................   unsigned backBits;            
....................   MFRC522_Wr( BITFRAMINGREG, 0x07 ); 
*
0342:  MOVLW  0D
0343:  MOVWF  4D
0344:  MOVLW  07
0345:  MOVWF  4E
0346:  CALL   095
....................   TagType[0] = reqMode; 
0347:  MOVF   35,W
0348:  MOVWF  04
0349:  BCF    03.7
034A:  BTFSC  36.0
034B:  BSF    03.7
034C:  MOVF   34,W
034D:  MOVWF  00
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, TagType, 1, TagType, &backBits ); 
034E:  MOVLW  0C
034F:  MOVWF  3B
0350:  MOVF   36,W
0351:  MOVWF  3D
0352:  MOVF   35,W
0353:  MOVWF  3C
0354:  MOVLW  01
0355:  MOVWF  3E
0356:  MOVF   36,W
0357:  MOVWF  40
0358:  MOVF   35,W
0359:  MOVWF  3F
035A:  CLRF   42
035B:  MOVLW  38
035C:  MOVWF  41
035D:  CALL   262
035E:  MOVF   78,W
035F:  MOVWF  37
....................   if ( (_status != MI_OK) || (backBits != 0x10) ) 
0360:  MOVF   37,F
0361:  BTFSS  03.2
0362:  GOTO   367
0363:  MOVF   38,W
0364:  SUBLW  10
0365:  BTFSC  03.2
0366:  GOTO   369
....................   { 
....................     _status = MI_ERR; 
0367:  MOVLW  02
0368:  MOVWF  37
....................   } 
....................   return _status; 
0369:  MOVF   37,W
036A:  MOVWF  78
.................... } 
.................... void MFRC522_CRC( char *dataIn, char length, char *dataOut ) 
.................... { 
.................... char i, n; 
....................     MFRC522_Clear_Bit( DIVIRQREG, 0x04 ); 
....................     MFRC522_Set_Bit( FIFOLEVELREG, 0x80 );    
....................     
....................      
....................     for ( i = 0; i < length; i++ ) 
....................     {   
....................         MFRC522_Wr( FIFODATAREG, *dataIn++ );   
....................     } 
....................     
....................     MFRC522_Wr( COMMANDREG, PCD_CALCCRC ); 
....................         
....................     i = 0xFF; 
....................   
....................     do 
....................     { 
....................         n = MFRC522_Rd( DIVIRQREG ); 
....................         i--; 
....................     } 
....................     while( i && !(n & 0x04) );        //CRCIrq = 1 
....................         
....................     dataOut[0] = MFRC522_Rd( CRCRESULTREGL ); 
....................     dataOut[1] = MFRC522_Rd( CRCRESULTREGM );        
.................... } 
.................... char MFRC522_SelectTag( char *serNum ) 
.................... { 
....................   char i; 
....................   char _status; 
....................   char size; 
....................   unsigned recvBits; 
....................   char buffer[9]; 
....................   
....................   
....................   
....................   buffer[0] = PICC_SElECTTAG; 
....................   buffer[1] = 0x70; 
....................   
....................   for ( i=2; i < 7; i++ ) 
....................   { 
....................     buffer[i] = *serNum++; 
....................   } 
....................   
....................   MFRC522_CRC( buffer, 7, &buffer[7] );             
....................   
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits ); 
....................   if ( (_status == MI_OK) && (recvBits == 0x18) ) 
....................   { 
....................     size = buffer[0]; 
....................   } 
....................   else 
....................   { 
....................     size = 0; 
....................   } 
....................   return size; 
.................... } 
.................... //hibernation 
.................... void MFRC522_Halt() 
.................... { 
....................   unsigned unLen; 
....................   char buff[4]; 
....................   
....................   buff[0] = PICC_HALT; 
....................   buff[1] = 0; 
....................   MFRC522_CRC( buff, 2, &buff[2] ); 
....................   MFRC522_Clear_Bit( STATUS2REG, 0x80 ); 
....................   MFRC522_ToCard( PCD_TRANSCEIVE, buff, 4, buff, &unLen ); 
....................   MFRC522_Clear_Bit( STATUS2REG, 0x08 ); 
.................... } 
....................  
.................... char MFRC522_AntiColl( char *serNum ) 
*
037B:  CLRF   39
.................... { 
....................   char _status; 
....................   char i; 
....................   char serNumCheck = 0; 
....................   unsigned unLen; 
....................   MFRC522_Wr( BITFRAMINGREG, 0x00 );                //TxLastBists = BitFramingReg[2..0] 
037C:  MOVLW  0D
037D:  MOVWF  4D
037E:  CLRF   4E
037F:  CALL   095
....................   serNum[0] = PICC_ANTICOLL; 
0380:  MOVF   35,W
0381:  MOVWF  04
0382:  BCF    03.7
0383:  BTFSC  36.0
0384:  BSF    03.7
0385:  MOVLW  93
0386:  MOVWF  00
....................   serNum[1] = 0x20; 
0387:  MOVLW  01
0388:  ADDWF  35,W
0389:  MOVWF  04
038A:  BCF    03.7
038B:  BTFSC  36.0
038C:  BSF    03.7
038D:  MOVLW  20
038E:  MOVWF  00
....................   MFRC522_Clear_Bit( STATUS2REG, 0x08 ); 
038F:  MOVLW  08
0390:  MOVWF  49
0391:  MOVWF  4A
0392:  CALL   12F
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, serNum, 2, serNum, &unLen ); 
0393:  MOVLW  0C
0394:  MOVWF  3B
0395:  MOVF   36,W
0396:  MOVWF  3D
0397:  MOVF   35,W
0398:  MOVWF  3C
0399:  MOVLW  02
039A:  MOVWF  3E
039B:  MOVF   36,W
039C:  MOVWF  40
039D:  MOVF   35,W
039E:  MOVWF  3F
039F:  CLRF   42
03A0:  MOVLW  3A
03A1:  MOVWF  41
03A2:  CALL   262
03A3:  MOVF   78,W
03A4:  MOVWF  37
....................   if (_status == MI_OK) 
03A5:  MOVF   37,F
03A6:  BTFSS  03.2
03A7:  GOTO   3C3
....................   { 
....................     for ( i=0; i < 4; i++ ) 
03A8:  CLRF   38
03A9:  MOVF   38,W
03AA:  SUBLW  03
03AB:  BTFSS  03.0
03AC:  GOTO   3B7
....................     { 
....................       serNumCheck ^= serNum[i]; 
03AD:  MOVF   38,W
03AE:  ADDWF  35,W
03AF:  MOVWF  04
03B0:  BCF    03.7
03B1:  BTFSC  36.0
03B2:  BSF    03.7
03B3:  MOVF   00,W
03B4:  XORWF  39,F
03B5:  INCF   38,F
03B6:  GOTO   3A9
....................     } 
....................     
....................     if ( serNumCheck != serNum[4] ) 
03B7:  MOVLW  04
03B8:  ADDWF  35,W
03B9:  MOVWF  04
03BA:  BCF    03.7
03BB:  BTFSC  36.0
03BC:  BSF    03.7
03BD:  MOVF   00,W
03BE:  SUBWF  39,W
03BF:  BTFSC  03.2
03C0:  GOTO   3C3
....................     { 
....................       _status = MI_ERR; 
03C1:  MOVLW  02
03C2:  MOVWF  37
....................     } 
....................   } 
....................   return _status; 
03C3:  MOVF   37,W
03C4:  MOVWF  78
.................... } 
....................  
.................... char MFRC522_isCard( char *TagType ) 
.................... { 
....................     if (MFRC522_Request( PICC_REQIDL, TagType ) == MI_OK) 
*
033C:  MOVLW  26
033D:  MOVWF  34
033E:  MOVF   33,W
033F:  MOVWF  36
0340:  MOVF   32,W
0341:  MOVWF  35
*
036B:  MOVF   78,F
036C:  BTFSS  03.2
036D:  GOTO   372
....................         return 1; 
036E:  MOVLW  01
036F:  MOVWF  78
0370:  GOTO   374
0371:  GOTO   374
....................     else 
....................         return 0; 
0372:  MOVLW  00
0373:  MOVWF  78
0374:  BCF    0A.3
0375:  BCF    0A.4
0376:  GOTO   532 (RETURN)
.................... } 
.................... char MFRC522_ReadCardSerial( char *str ) 
.................... { 
.................... char _status; 
.................... _status = MFRC522_AntiColl( str ); 
0377:  MOVF   33,W
0378:  MOVWF  36
0379:  MOVF   32,W
037A:  MOVWF  35
*
03C5:  MOVF   78,W
03C6:  MOVWF  34
.................... str[5] = 0; 
03C7:  MOVLW  05
03C8:  ADDWF  32,W
03C9:  MOVWF  04
03CA:  BCF    03.7
03CB:  BTFSC  33.0
03CC:  BSF    03.7
03CD:  CLRF   00
.................... if (_status == MI_OK) 
03CE:  MOVF   34,F
03CF:  BTFSS  03.2
03D0:  GOTO   3D5
....................   return 1; 
03D1:  MOVLW  01
03D2:  MOVWF  78
03D3:  GOTO   3D7
03D4:  GOTO   3D7
.................... else 
....................   return 0; 
03D5:  MOVLW  00
03D6:  MOVWF  78
03D7:  BCF    0A.3
03D8:  BCF    0A.4
03D9:  GOTO   539 (RETURN)
.................... } 
....................  
.................... int MFRC522_Compare_UID(char* l, char* u) 
.................... { 
....................    if(l[0]==u[0] && l[1]==u[1] && l[2]==u[2] && l[3]==u[3]){ 
*
0427:  MOVF   32,W
0428:  MOVWF  04
0429:  BCF    03.7
042A:  BTFSC  33.0
042B:  BSF    03.7
042C:  MOVF   00,W
042D:  MOVWF  36
042E:  MOVF   34,W
042F:  MOVWF  04
0430:  BCF    03.7
0431:  BTFSC  35.0
0432:  BSF    03.7
0433:  MOVF   00,W
0434:  SUBWF  36,W
0435:  BTFSS  03.2
0436:  GOTO   471
0437:  MOVLW  01
0438:  ADDWF  32,W
0439:  MOVWF  04
043A:  BCF    03.7
043B:  BTFSC  33.0
043C:  BSF    03.7
043D:  MOVF   00,W
043E:  MOVWF  36
043F:  MOVLW  01
0440:  ADDWF  34,W
0441:  MOVWF  04
0442:  BCF    03.7
0443:  BTFSC  35.0
0444:  BSF    03.7
0445:  MOVF   00,W
0446:  SUBWF  36,W
0447:  BTFSS  03.2
0448:  GOTO   471
0449:  MOVLW  02
044A:  ADDWF  32,W
044B:  MOVWF  04
044C:  BCF    03.7
044D:  BTFSC  33.0
044E:  BSF    03.7
044F:  MOVF   00,W
0450:  MOVWF  36
0451:  MOVLW  02
0452:  ADDWF  34,W
0453:  MOVWF  04
0454:  BCF    03.7
0455:  BTFSC  35.0
0456:  BSF    03.7
0457:  MOVF   00,W
0458:  SUBWF  36,W
0459:  BTFSS  03.2
045A:  GOTO   471
045B:  MOVLW  03
045C:  ADDWF  32,W
045D:  MOVWF  04
045E:  BCF    03.7
045F:  BTFSC  33.0
0460:  BSF    03.7
0461:  MOVF   00,W
0462:  MOVWF  36
0463:  MOVLW  03
0464:  ADDWF  34,W
0465:  MOVWF  04
0466:  BCF    03.7
0467:  BTFSC  35.0
0468:  BSF    03.7
0469:  MOVF   00,W
046A:  SUBWF  36,W
046B:  BTFSS  03.2
046C:  GOTO   471
....................       return 1; 
046D:  MOVLW  01
046E:  MOVWF  78
046F:  GOTO   473
....................    }else{ 
0470:  GOTO   473
....................       return 0; 
0471:  MOVLW  00
0472:  MOVWF  78
....................    } 
0473:  RETURN
.................... } 
....................  
.................... void MFRC522_Clear_UID(char* u_i) 
.................... { 
....................   for(int j=0; j<10; j++) 
*
04E7:  CLRF   34
04E8:  MOVF   34,W
04E9:  SUBLW  09
04EA:  BTFSS  03.0
04EB:  GOTO   4F5
....................   { 
....................     u_i[j] = 0; 
04EC:  MOVF   34,W
04ED:  ADDWF  32,W
04EE:  MOVWF  04
04EF:  BCF    03.7
04F0:  BTFSC  33.0
04F1:  BSF    03.7
04F2:  CLRF   00
04F3:  INCF   34,F
04F4:  GOTO   4E8
....................   } 
04F5:  BCF    0A.3
04F6:  BCF    0A.4
04F7:  GOTO   54D (RETURN)
.................... } 
....................  
.................... #include <LCD_16X2.c>                            
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
0040:  BTFSC  3E.0
0041:  GOTO   044
0042:  BCF    08.4
0043:  GOTO   045
0044:  BSF    08.4
0045:  BSF    03.5
0046:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
0047:  BCF    03.5
0048:  BTFSC  3E.1
0049:  GOTO   04C
004A:  BCF    08.5
004B:  GOTO   04D
004C:  BSF    08.5
004D:  BSF    03.5
004E:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
004F:  BCF    03.5
0050:  BTFSC  3E.2
0051:  GOTO   054
0052:  BCF    08.6
0053:  GOTO   055
0054:  BSF    08.6
0055:  BSF    03.5
0056:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
0057:  BCF    03.5
0058:  BTFSC  3E.3
0059:  GOTO   05C
005A:  BCF    08.7
005B:  GOTO   05D
005C:  BSF    08.7
005D:  BSF    03.5
005E:  BCF    08.7
....................  
....................  delay_cycles(1); 
005F:  NOP
....................  output_high(LCD_E); 
0060:  BCF    08.3
0061:  BCF    03.5
0062:  BSF    08.3
....................  delay_us(2); 
0063:  MOVLW  02
0064:  MOVWF  77
0065:  DECFSZ 77,F
0066:  GOTO   065
0067:  GOTO   068
0068:  NOP
....................  output_low(LCD_E); 
0069:  BSF    03.5
006A:  BCF    08.3
006B:  BCF    03.5
006C:  BCF    08.3
006D:  RETURN
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
006E:  BSF    03.5
006F:  BCF    08.2
0070:  BCF    03.5
0071:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0072:  MOVLW  63
0073:  MOVWF  77
0074:  DECFSZ 77,F
0075:  GOTO   074
0076:  GOTO   077
.................... #endif 
....................  
.................... if(address) 
0077:  MOVF   3B,F
0078:  BTFSC  03.2
0079:  GOTO   07F
....................    output_high(LCD_RS); 
007A:  BSF    03.5
007B:  BCF    08.2
007C:  BCF    03.5
007D:  BSF    08.2
007E:  GOTO   083
.................... else 
....................    output_low(LCD_RS); 
007F:  BSF    03.5
0080:  BCF    08.2
0081:  BCF    03.5
0082:  BCF    08.2
....................  
....................  delay_cycles(1); 
0083:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0084:  BSF    03.5
0085:  BCF    08.3
0086:  BCF    03.5
0087:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4); 
0088:  SWAPF  3C,W
0089:  MOVWF  3D
008A:  MOVLW  0F
008B:  ANDWF  3D,F
008C:  MOVF   3D,W
008D:  MOVWF  3E
008E:  CALL   040
.................... lcd_send_nibble(n & 0xf); 
008F:  MOVF   3C,W
0090:  ANDLW  0F
0091:  MOVWF  3D
0092:  MOVWF  3E
0093:  CALL   040
0094:  RETURN
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
0156:  BSF    03.5
0157:  BCF    08.2
0158:  BCF    03.5
0159:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
015A:  BSF    03.5
015B:  BCF    08.3
015C:  BCF    03.5
015D:  BCF    08.3
....................  
.................... delay_ms(15); 
015E:  MOVLW  0F
015F:  MOVWF  37
0160:  CALL   02C
....................  
.................... for(i=0 ;i < 3; i++) 
0161:  CLRF   32
0162:  MOVF   32,W
0163:  SUBLW  02
0164:  BTFSS  03.0
0165:  GOTO   16E
....................    { 
....................     lcd_send_nibble(0x03); 
0166:  MOVLW  03
0167:  MOVWF  3E
0168:  CALL   040
....................     delay_ms(5); 
0169:  MOVLW  05
016A:  MOVWF  37
016B:  CALL   02C
016C:  INCF   32,F
016D:  GOTO   162
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
016E:  MOVLW  02
016F:  MOVWF  3E
0170:  CALL   040
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0171:  CLRF   32
0172:  MOVF   32,W
0173:  SUBLW  03
0174:  BTFSS  03.0
0175:  GOTO   182
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0176:  MOVF   32,W
0177:  CALL   004
0178:  MOVWF  33
0179:  CLRF   3B
017A:  MOVF   33,W
017B:  MOVWF  3C
017C:  CALL   06E
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
017D:  MOVLW  05
017E:  MOVWF  37
017F:  CALL   02C
....................     #endif 
0180:  INCF   32,F
0181:  GOTO   172
....................    } 
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
01D6:  DECFSZ 38,W
01D7:  GOTO   1D9
01D8:  GOTO   1DC
....................    address = lcd_line_two; 
01D9:  MOVLW  40
01DA:  MOVWF  39
01DB:  GOTO   1DD
.................... else 
....................    address=0; 
01DC:  CLRF   39
....................  
.................... address += x-1; 
01DD:  MOVLW  01
01DE:  SUBWF  37,W
01DF:  ADDWF  39,F
.................... lcd_send_byte(0, 0x80 | address); 
01E0:  MOVF   39,W
01E1:  IORLW  80
01E2:  MOVWF  3A
01E3:  CLRF   3B
01E4:  MOVF   3A,W
01E5:  MOVWF  3C
01E6:  CALL   06E
01E7:  RETURN
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
01E8:  MOVF   36,W
01E9:  XORLW  0C
01EA:  BTFSC  03.2
01EB:  GOTO   1F3
01EC:  XORLW  06
01ED:  BTFSC  03.2
01EE:  GOTO   1FB
01EF:  XORLW  02
01F0:  BTFSC  03.2
01F1:  GOTO   201
01F2:  GOTO   206
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
01F3:  CLRF   3B
01F4:  MOVLW  01
01F5:  MOVWF  3C
01F6:  CALL   06E
....................       delay_ms(2); 
01F7:  MOVLW  02
01F8:  MOVWF  37
01F9:  CALL   02C
....................       break; 
01FA:  GOTO   20B
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
01FB:  MOVLW  01
01FC:  MOVWF  37
01FD:  MOVLW  02
01FE:  MOVWF  38
01FF:  CALL   1D6
....................        break; 
0200:  GOTO   20B
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0201:  CLRF   3B
0202:  MOVLW  10
0203:  MOVWF  3C
0204:  CALL   06E
....................        break; 
0205:  GOTO   20B
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0206:  MOVLW  01
0207:  MOVWF  3B
0208:  MOVF   36,W
0209:  MOVWF  3C
020A:  CALL   06E
....................        break; 
....................    } 
020B:  RETURN
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
.................... void lcd_clear() 
.................... { 
....................   lcd_putc("\f"); 
*
03DA:  MOVLW  0C
03DB:  BSF    03.6
03DC:  MOVWF  0D
03DD:  MOVLW  00
03DE:  MOVWF  0F
03DF:  BCF    03.6
03E0:  CALL   20C
03E1:  RETURN
.................... } 
....................  
.................... void send_D7_D4(int8 address_lcd,int8 nibble_lcd) 
.................... {   
....................   if((nibble_lcd & 1)==1) output_high(LCD_DB4); else output_low(LCD_DB4); 
....................   if((nibble_lcd & 2)==2) output_high(LCD_DB5); else output_low(LCD_DB5); 
....................   if((nibble_lcd & 4)==4) output_high(LCD_DB6); else output_low(LCD_DB6); 
....................   if((nibble_lcd & 8)==8) output_high(LCD_DB7); else output_low(LCD_DB7); 
....................    delay_us(60); 
....................    if(address_lcd) 
....................      output_high(LCD_RS); 
....................        
....................    else 
....................      output_low(LCD_RS);  
....................        
....................  output_high(LCD_E); 
....................  delay_us(2); 
....................  output_low(LCD_E); 
.................... } 
....................  
.................... void send_byte_data(int8 address_lcd, int8 n) 
.................... { 
....................    send_D7_D4(address_lcd,n >> 4); 
....................    send_D7_D4(address_lcd,n & 0xf); 
.................... } 
....................  
.................... void CGRAM_putc(int8 n) 
.................... { 
....................    send_byte_data(1,n); 
.................... } 
....................  
.................... void CGRAM_position(int p) 
.................... { 
....................   send_byte_data(0,0x40+p*8); 
.................... } 
....................  
.................... void CGRAM_create_char(char* new_char) 
.................... { 
....................   for(int cg=0; cg<=7;cg++) 
....................   { 
....................     send_byte_data(1,new_char[cg]); 
....................   } 
.................... } 
....................  
....................  
.................... char user_1[4] = {0x6B, 0x3A, 0x45, 0x01};       
*
0504:  MOVLW  6B
0505:  BCF    03.5
0506:  MOVWF  20
0507:  MOVLW  3A
0508:  MOVWF  21
0509:  MOVLW  45
050A:  MOVWF  22
050B:  MOVLW  01
050C:  MOVWF  23
.................... char user_2[4] = {0x43, 0x89, 0x2D, 0x31}; 
050D:  MOVLW  43
050E:  MOVWF  24
050F:  MOVLW  89
0510:  MOVWF  25
0511:  MOVLW  2D
0512:  MOVWF  26
0513:  MOVLW  31
0514:  MOVWF  27
.................... char user_3[4] = {0xAB, 0x60, 0x3B, 0x01}; 
0515:  MOVLW  AB
0516:  MOVWF  28
0517:  MOVLW  60
0518:  MOVWF  29
0519:  MOVLW  3B
051A:  MOVWF  2A
051B:  MOVLW  01
051C:  MOVWF  2B
....................  
.................... char UID[4];                                     
.................... unsigned int TagType;                           // Variable de verificacion de tag 
....................  
.................... int cardProcessed = 0;                          // Variable de estado de procesamiento de tarjeta 
....................  
.................... // Función para inicializar el sistema 
.................... void system_init() { 
....................    output_low(led_access);                       
*
014E:  BSF    03.5
014F:  BCF    06.0
0150:  BCF    03.5
0151:  BCF    06.0
....................    output_low(led_error); 
0152:  BSF    03.5
0153:  BCF    06.1
0154:  BCF    03.5
0155:  BCF    06.1
....................    lcd_init();                                   
....................    MFRC522_Init();                              
*
01D3:  BCF    0A.3
01D4:  BCF    0A.4
01D5:  GOTO   51E (RETURN)
.................... } 
....................  
.................... // Función para leer y mostrar la UID en la pantalla LCD 
.................... void show_UID_on_LCD() { 
....................    lcd_clear(); 
*
03E2:  CALL   3DA
....................    lcd_gotoxy(1,1); 
03E3:  MOVLW  01
03E4:  MOVWF  37
03E5:  MOVWF  38
03E6:  CALL   1D6
....................    lcd_putc("ID: "); 
03E7:  MOVLW  0D
03E8:  BSF    03.6
03E9:  MOVWF  0D
03EA:  MOVLW  00
03EB:  MOVWF  0F
03EC:  BCF    03.6
03ED:  CALL   20C
....................    lcd_gotoxy(5,1); 
03EE:  MOVLW  05
03EF:  MOVWF  37
03F0:  MOVLW  01
03F1:  MOVWF  38
03F2:  CALL   1D6
....................    for(int i = 0; i < 4; i++) { 
03F3:  CLRF   32
03F4:  MOVF   32,W
03F5:  SUBLW  03
03F6:  BTFSS  03.0
03F7:  GOTO   424
....................       printf(lcd_putc, "%X", UID[i]); 
03F8:  MOVLW  2C
03F9:  ADDWF  32,W
03FA:  MOVWF  04
03FB:  BCF    03.7
03FC:  MOVF   00,W
03FD:  MOVWF  33
03FE:  MOVF   33,W
03FF:  MOVWF  34
0400:  MOVLW  37
0401:  MOVWF  35
*
0422:  INCF   32,F
0423:  GOTO   3F4
....................    } 
0424:  BCF    0A.3
0425:  BCF    0A.4
0426:  GOTO   53D (RETURN)
.................... } 
....................  
.................... // Función para verificar si el UID coincide con algún usuario 
.................... int check_valid_user() { 
....................    return (MFRC522_Compare_UID(UID, user_1) ||  
....................            MFRC522_Compare_UID(UID, user_2) ||  
....................            MFRC522_Compare_UID(UID, user_3)); 
*
0474:  CLRF   33
0475:  MOVLW  2C
0476:  MOVWF  32
0477:  CLRF   35
0478:  MOVLW  20
0479:  MOVWF  34
047A:  CALL   427
047B:  MOVF   78,F
047C:  BTFSS  03.2
047D:  GOTO   494
047E:  CLRF   33
047F:  MOVLW  2C
0480:  MOVWF  32
0481:  CLRF   35
0482:  MOVLW  24
0483:  MOVWF  34
0484:  CALL   427
0485:  MOVF   78,F
0486:  BTFSS  03.2
0487:  GOTO   494
0488:  CLRF   33
0489:  MOVLW  2C
048A:  MOVWF  32
048B:  CLRF   35
048C:  MOVLW  28
048D:  MOVWF  34
048E:  CALL   427
048F:  MOVF   78,F
0490:  BTFSS  03.2
0491:  GOTO   494
0492:  MOVLW  00
0493:  GOTO   495
0494:  MOVLW  01
0495:  MOVWF  78
0496:  BCF    0A.3
0497:  BCF    0A.4
0498:  GOTO   541 (RETURN)
.................... } 
....................  
.................... // Función para manejar el acceso correcto 
.................... void access_granted() { 
....................    output_high(led_access); 
0499:  BSF    03.5
049A:  BCF    06.0
049B:  BCF    03.5
049C:  BSF    06.0
....................    output_low(led_error); 
049D:  BSF    03.5
049E:  BCF    06.1
049F:  BCF    03.5
04A0:  BCF    06.1
....................    lcd_gotoxy(1,2); 
04A1:  MOVLW  01
04A2:  MOVWF  37
04A3:  MOVLW  02
04A4:  MOVWF  38
04A5:  CALL   1D6
....................    lcd_putc("Bienvenido a Estructuras"); 
04A6:  MOVLW  10
04A7:  BSF    03.6
04A8:  MOVWF  0D
04A9:  MOVLW  00
04AA:  MOVWF  0F
04AB:  BCF    03.6
04AC:  CALL   20C
....................    delay_ms(1000); 
04AD:  MOVLW  04
04AE:  MOVWF  32
04AF:  MOVLW  FA
04B0:  MOVWF  37
04B1:  CALL   02C
04B2:  DECFSZ 32,F
04B3:  GOTO   4AF
....................    output_low(led_access); 
04B4:  BSF    03.5
04B5:  BCF    06.0
04B6:  BCF    03.5
04B7:  BCF    06.0
....................    output_low(led_error); 
04B8:  BSF    03.5
04B9:  BCF    06.1
04BA:  BCF    03.5
04BB:  BCF    06.1
....................    lcd_clear(); 
04BC:  CALL   3DA
04BD:  BCF    0A.3
04BE:  BCF    0A.4
04BF:  GOTO   545 (RETURN)
.................... } 
....................  
.................... // Función para manejar el acceso denegado 
.................... void access_denied() { 
....................    output_high(led_error); 
04C0:  BSF    03.5
04C1:  BCF    06.1
04C2:  BCF    03.5
04C3:  BSF    06.1
....................    output_low(led_access); 
04C4:  BSF    03.5
04C5:  BCF    06.0
04C6:  BCF    03.5
04C7:  BCF    06.0
....................    lcd_gotoxy(1,2); 
04C8:  MOVLW  01
04C9:  MOVWF  37
04CA:  MOVLW  02
04CB:  MOVWF  38
04CC:  CALL   1D6
....................    lcd_putc("Acceso Denegado"); 
04CD:  MOVLW  1D
04CE:  BSF    03.6
04CF:  MOVWF  0D
04D0:  MOVLW  00
04D1:  MOVWF  0F
04D2:  BCF    03.6
04D3:  CALL   20C
....................    delay_ms(1000); 
04D4:  MOVLW  04
04D5:  MOVWF  32
04D6:  MOVLW  FA
04D7:  MOVWF  37
04D8:  CALL   02C
04D9:  DECFSZ 32,F
04DA:  GOTO   4D6
....................    output_low(led_access); 
04DB:  BSF    03.5
04DC:  BCF    06.0
04DD:  BCF    03.5
04DE:  BCF    06.0
....................    output_low(led_error); 
04DF:  BSF    03.5
04E0:  BCF    06.1
04E1:  BCF    03.5
04E2:  BCF    06.1
....................    lcd_clear(); 
04E3:  CALL   3DA
04E4:  BCF    0A.3
04E5:  BCF    0A.4
04E6:  GOTO   547 (RETURN)
.................... } 
....................  
.................... // Función principal 
.................... void main() { 
*
04F8:  MOVF   03,W
04F9:  ANDLW  1F
04FA:  MOVWF  03
04FB:  CLRF   31
04FC:  BSF    03.5
04FD:  BSF    1F.0
04FE:  BSF    1F.1
04FF:  BSF    1F.2
0500:  BCF    1F.3
0501:  MOVLW  07
0502:  MOVWF  1C
0503:  BCF    03.7
....................    system_init();  // Inicializa el sistema 
*
051D:  GOTO   14E
....................  
....................    while(true) { 
....................       lcd_gotoxy(2,1);                           
051E:  MOVLW  02
051F:  MOVWF  37
0520:  MOVLW  01
0521:  MOVWF  38
0522:  CALL   1D6
....................       lcd_putc("IDENTIFIQUESE"); 
0523:  MOVLW  25
0524:  BSF    03.6
0525:  MOVWF  0D
0526:  MOVLW  00
0527:  MOVWF  0F
0528:  BCF    03.6
0529:  CALL   20C
....................       output_high(led_conf); 
052A:  BSF    03.5
052B:  BCF    06.5
052C:  BCF    03.5
052D:  BSF    06.5
....................        
....................       if(MFRC522_isCard(&TagType)) {             // Verificación si hay un tag disponible 
052E:  CLRF   33
052F:  MOVLW  30
0530:  MOVWF  32
0531:  GOTO   33C
0532:  MOVF   78,F
0533:  BTFSC  03.2
0534:  GOTO   552
....................          if(MFRC522_ReadCardSerial(&UID)) {      // Lectura y verificación si encontró algún tag 
0535:  CLRF   33
0536:  MOVLW  2C
0537:  MOVWF  32
0538:  GOTO   377
0539:  MOVF   78,F
053A:  BTFSC  03.2
053B:  GOTO   551
....................             show_UID_on_LCD();                   // Mostrar la UID en el LCD 
053C:  GOTO   3E2
....................  
....................             if(!cardProcessed) {                 // Solo procesar si no ha sido procesada 
053D:  MOVF   31,F
053E:  BTFSS  03.2
053F:  GOTO   549
....................                if(check_valid_user()) { 
0540:  GOTO   474
0541:  MOVF   78,F
0542:  BTFSC  03.2
0543:  GOTO   546
....................                   access_granted();              // Acceso correcto 
0544:  GOTO   499
....................                } else { 
0545:  GOTO   547
....................                   access_denied();               // Acceso denegado 
0546:  GOTO   4C0
....................                } 
....................                cardProcessed = 1;                // Marcar la tarjeta como procesada 
0547:  MOVLW  01
0548:  MOVWF  31
....................             } 
....................             MFRC522_Clear_UID(UID);              // Limpia temporalmente la ID 
0549:  CLRF   33
054A:  MOVLW  2C
054B:  MOVWF  32
054C:  GOTO   4E7
....................             delay_ms(100); 
054D:  MOVLW  64
054E:  MOVWF  37
054F:  CALL   02C
....................          } else { 
0550:  GOTO   552
....................             cardProcessed = 0;                   // Restablecer el estado si no se detecta ninguna tarjeta 
0551:  CLRF   31
....................          } 
....................       } 
0552:  GOTO   51E
....................    } 
.................... } 
....................  
0553:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
