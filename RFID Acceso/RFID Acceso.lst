CCS PCM C Compiler, Version 5.015, 5967               18-sept.-24 18:19

               Filename:   C:\Users\JHON GARCIA\Desktop\ACCESO_STM\RFID Acceso\RFID Acceso.lst

               ROM used:   1353 words (17%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           57 (15%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   45E
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,00
000D:  DATA 49,22
000E:  DATA 45,27
000F:  DATA D4,24
0010:  DATA C6,24
0011:  DATA D1,2A
0012:  DATA C5,29
0013:  DATA 45,00
0014:  DATA 49,22
0015:  DATA 3A,10
0016:  DATA 00,01
0017:  DATA C2,34
0018:  DATA 65,37
0019:  DATA F6,32
001A:  DATA EE,34
001B:  DATA E4,37
001C:  DATA A0,30
001D:  DATA A0,22
001E:  DATA 73,3A
001F:  DATA F2,3A
0020:  DATA 63,3A
0021:  DATA 75,39
0022:  DATA E1,39
0023:  DATA 00,01
0024:  DATA C1,31
0025:  DATA E3,32
0026:  DATA F3,37
0027:  DATA 20,22
0028:  DATA 65,37
0029:  DATA E5,33
002A:  DATA 61,32
002B:  DATA 6F,00
*
0207:  MOVF   0B,W
0208:  MOVWF  34
0209:  BCF    0B.7
020A:  BSF    03.5
020B:  BSF    03.6
020C:  BSF    0C.7
020D:  BSF    0C.0
020E:  NOP
020F:  NOP
0210:  BCF    03.5
0211:  BCF    03.6
0212:  BTFSC  34.7
0213:  BSF    0B.7
0214:  BSF    03.6
0215:  MOVF   0C,W
0216:  ANDLW  7F
0217:  BTFSC  03.2
0218:  GOTO   25B
0219:  BCF    03.6
021A:  MOVWF  34
021B:  BSF    03.6
021C:  MOVF   0D,W
021D:  BCF    03.6
021E:  MOVWF  35
021F:  BSF    03.6
0220:  MOVF   0F,W
0221:  BCF    03.6
0222:  MOVWF  36
0223:  MOVF   34,W
0224:  MOVWF  37
0225:  CALL   1E3
0226:  MOVF   35,W
0227:  BSF    03.6
0228:  MOVWF  0D
0229:  BCF    03.6
022A:  MOVF   36,W
022B:  BSF    03.6
022C:  MOVWF  0F
022D:  BCF    03.6
022E:  MOVF   0B,W
022F:  MOVWF  37
0230:  BCF    0B.7
0231:  BSF    03.5
0232:  BSF    03.6
0233:  BSF    0C.7
0234:  BSF    0C.0
0235:  NOP
0236:  NOP
0237:  BCF    03.5
0238:  BCF    03.6
0239:  BTFSC  37.7
023A:  BSF    0B.7
023B:  BSF    03.6
023C:  RLF    0C,W
023D:  RLF    0E,W
023E:  ANDLW  7F
023F:  BTFSC  03.2
0240:  GOTO   25B
0241:  BCF    03.6
0242:  MOVWF  34
0243:  BSF    03.6
0244:  MOVF   0D,W
0245:  BCF    03.6
0246:  MOVWF  35
0247:  BSF    03.6
0248:  MOVF   0F,W
0249:  BCF    03.6
024A:  MOVWF  36
024B:  MOVF   34,W
024C:  MOVWF  37
024D:  CALL   1E3
024E:  MOVF   35,W
024F:  BSF    03.6
0250:  MOVWF  0D
0251:  BCF    03.6
0252:  MOVF   36,W
0253:  BSF    03.6
0254:  MOVWF  0F
0255:  INCF   0D,F
0256:  BTFSC  03.2
0257:  INCF   0F,F
0258:  BCF    03.6
0259:  GOTO   207
025A:  BSF    03.6
025B:  BCF    03.6
025C:  RETURN
*
03DD:  BTFSC  36.7
03DE:  GOTO   3EF
03DF:  MOVLW  0F
03E0:  MOVWF  77
03E1:  SWAPF  35,W
03E2:  ANDWF  77,F
03E3:  MOVLW  0A
03E4:  SUBWF  77,W
03E5:  BTFSC  03.0
03E6:  GOTO   3EA
03E7:  MOVLW  30
03E8:  ADDWF  77,F
03E9:  GOTO   3EC
03EA:  MOVF   36,W
03EB:  ADDWF  77,F
03EC:  MOVF   77,W
03ED:  MOVWF  37
03EE:  CALL   1E3
03EF:  MOVLW  0F
03F0:  ANDWF  35,F
03F1:  MOVLW  0A
03F2:  SUBWF  35,W
03F3:  BTFSC  03.0
03F4:  GOTO   3F7
03F5:  MOVLW  30
03F6:  GOTO   3F9
03F7:  BCF    36.7
03F8:  MOVF   36,W
03F9:  ADDWF  35,F
03FA:  MOVF   35,W
03FB:  MOVWF  37
03FC:  CALL   1E3
03FD:  BCF    0A.3
03FE:  BCF    0A.4
03FF:  GOTO   4CB (RETURN)
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOPUT,NOLVP,NOBROWNOUT 
.................... #use delay(clock=20M) 
*
002C:  MOVLW  38
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   03F
0032:  MOVLW  06
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  7B
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 00,F
003E:  GOTO   032
003F:  RETURN
.................... #use standard_io(A) 
.................... #use standard_io(D) 
.................... #use standard_io(B) 
....................  
.................... //led acceso --> salida 
.................... #define led_access PIN_B0                        
.................... #define led_error PIN_B1 
.................... #define led_conf PIN_B5 
....................  
.................... //pines salida --> pantalla lcd 
.................... #define LCD_DB4   PIN_D4                         
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
.................... #define LCD_RS    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
.................... // pines entrada --> RFID (comunicación spi) 
.................... #define MFRC522_CS  PIN_A0                      // Pin SDA 
.................... #define MFRC522_SCK PIN_A1                      // Pin SCK 
.................... #define MFRC522_SI  PIN_A2                      // Pin MOSI 
.................... #define MFRC522_SO  PIN_A3                      // Pin MISO 
.................... #define MFRC522_RST PIN_A4                      // Pin RST 
.................... #include <RC522.h>                               
.................... #define PCD_IDLE              0x00               //NO action; Cancel the current command 
.................... #define PCD_AUTHENT           0x0E               //Authentication Key 
.................... #define PCD_RECEIVE           0x08               //Receive Data 
.................... #define PCD_TRANSMIT          0x04               //Transmit data 
.................... #define PCD_TRANSCEIVE        0x0C               //Transmit and receive data, 
.................... #define PCD_RESETPHASE        0x0F               //Reset 
.................... #define PCD_CALCCRC           0x03               //CRC Calculate 
....................  
.................... #define PICC_REQIDL          0x26               // find the antenna area does not enter hibernation 
.................... #define PICC_REQALL          0x52               // find all the cards antenna area 
.................... #define PICC_ANTICOLL        0x93               // anti-collision 
.................... #define PICC_SElECTTAG       0x93               // election card 
.................... #define PICC_AUTHENT1A       0x60               // authentication key A 
.................... #define PICC_AUTHENT1B       0x61               // authentication key B 
.................... #define PICC_READ            0x30               // Read Block 
.................... #define PICC_WRITE           0xA0               // write block 
.................... #define PICC_DECREMENT       0xC0               // debit 
.................... #define PICC_INCREMENT       0xC1               // recharge 
.................... #define PICC_RESTORE         0xC2               // transfer block data to the buffer 
.................... #define PICC_TRANSFER        0xB0               // save the data in the buffer 
.................... #define PICC_HALT            0x50               // Sleep 
....................  
.................... #define MI_OK                 0 
.................... #define MI_NOTAGERR           1 
.................... #define MI_ERR                2 
.................... //------------------MFRC522 Register--------------- 
....................  
.................... #define     RESERVED00            0x00    
.................... #define     COMMANDREG            0x01    
.................... #define     COMMIENREG            0x02    
.................... #define     DIVLENREG             0x03    
.................... #define     COMMIRQREG            0x04    
.................... #define     DIVIRQREG             0x05 
.................... #define     ERRORREG              0x06    
.................... #define     STATUS1REG            0x07    
.................... #define     STATUS2REG            0x08    
.................... #define     FIFODATAREG           0x09 
.................... #define     FIFOLEVELREG          0x0A 
.................... #define     WATERLEVELREG         0x0B 
.................... #define     CONTROLREG            0x0C 
.................... #define     BITFRAMINGREG         0x0D 
.................... #define     COLLREG               0x0E 
.................... #define     RESERVED01            0x0F 
.................... //PAGE 1:Command     
.................... #define     RESERVED10            0x10 
.................... #define     MODEREG               0x11 
.................... #define     TXMODEREG             0x12 
.................... #define     RXMODEREG             0x13 
.................... #define     TXCONTROLREG          0x14 
.................... #define     TXAUTOREG             0x15 
.................... #define     TXSELREG              0x16 
.................... #define     RXSELREG              0x17 
.................... #define     RXTHRESHOLDREG        0x18 
.................... #define     DEMODREG              0x19 
.................... #define     RESERVED11            0x1A 
.................... #define     RESERVED12            0x1B 
.................... #define     MIFAREREG             0x1C 
.................... #define     RESERVED13            0x1D 
.................... #define     RESERVED14            0x1E 
.................... #define     SERIALSPEEDREG        0x1F 
.................... //PAGE 2:CFG    
.................... #define     RESERVED20            0x20  
.................... #define     CRCRESULTREGM         0x21 
.................... #define     CRCRESULTREGL         0x22 
.................... #define     RESERVED21            0x23 
.................... #define     MODWIDTHREG           0x24 
.................... #define     RESERVED22            0x25 
.................... #define     RFCFGREG              0x26 
.................... #define     GSNREG                0x27 
.................... #define     CWGSPREG              0x28 
.................... #define     MODGSPREG             0x29 
.................... #define     TMODEREG              0x2A 
.................... #define     TPRESCALERREG         0x2B 
.................... #define     TRELOADREGH           0x2C 
.................... #define     TRELOADREGL           0x2D 
.................... #define     TCOUNTERVALUEREGH     0x2E 
.................... #define     TCOUNTERVALUEREGL     0x2F 
.................... //PAGE 3:TEST REGISTER     
.................... #define     RESERVED30            0x30 
.................... #define     TESTSEL1REG           0x31 
.................... #define     TESTSEL2REG           0x32 
.................... #define     TESTPINENREG          0x33 
.................... #define     TESTPINVALUEREG       0x34 
.................... #define     TESTBUSREG            0x35 
.................... #define     AUTOTESTREG           0x36 
.................... #define     VERSIONREG            0x37 
.................... #define     ANALOGTESTREG         0x38 
.................... #define     TESTDAC1REG           0x39  
.................... #define     TESTDAC2REG           0x3A   
.................... #define     TESTADCREG            0x3B   
.................... #define     RESERVED31            0x3C   
.................... #define     RESERVED32            0x3D   
.................... #define     RESERVED33            0x3E   
.................... #define     RESERVED34            0x3F 
....................  
.................... unsigned int8 MFRC522_Rd(unsigned int8 Address)  
*
0111:  CLRF   51
.................... { 
....................    unsigned int i, ucAddr; 
....................    unsigned int ucResult = 0; 
....................    output_bit (MFRC522_SCK, 0); 
0112:  BCF    05.1
0113:  BSF    03.5
0114:  BCF    05.1
....................    output_bit (MFRC522_CS, 0); 
0115:  BCF    03.5
0116:  BCF    05.0
0117:  BSF    03.5
0118:  BCF    05.0
....................    ucAddr = ( (Address<<1)&0x7E)|0x80; 
0119:  BCF    03.0
011A:  BCF    03.5
011B:  RLF    4E,W
011C:  ANDLW  7E
011D:  IORLW  80
011E:  MOVWF  50
....................  
....................    FOR (i = 8; i > 0; i--) 
011F:  MOVLW  08
0120:  MOVWF  4F
0121:  MOVF   4F,F
0122:  BTFSC  03.2
0123:  GOTO   13B
....................    { 
....................       output_bit (MFRC522_SI, ((ucAddr&0x80) == 0x80)); 
0124:  MOVF   50,W
0125:  ANDLW  80
0126:  SUBLW  80
0127:  BTFSC  03.2
0128:  GOTO   12B
0129:  BCF    05.2
012A:  GOTO   12C
012B:  BSF    05.2
012C:  BSF    03.5
012D:  BCF    05.2
....................       output_bit (MFRC522_SCK, 1); 
012E:  BCF    03.5
012F:  BSF    05.1
0130:  BSF    03.5
0131:  BCF    05.1
....................       ucAddr <<= 1; 
0132:  BCF    03.0
0133:  BCF    03.5
0134:  RLF    50,F
....................       output_bit (MFRC522_SCK, 0); 
0135:  BCF    05.1
0136:  BSF    03.5
0137:  BCF    05.1
0138:  BCF    03.5
0139:  DECF   4F,F
013A:  GOTO   121
....................    } 
....................  
....................    FOR (i = 8; i > 0; i--) 
013B:  MOVLW  08
013C:  MOVWF  4F
013D:  MOVF   4F,F
013E:  BTFSC  03.2
013F:  GOTO   153
....................    { 
....................       output_bit (MFRC522_SCK, 1); 
0140:  BSF    05.1
0141:  BSF    03.5
0142:  BCF    05.1
....................       ucResult <<= 1; 
0143:  BCF    03.0
0144:  BCF    03.5
0145:  RLF    51,F
....................       ucResult|= (INT1) input (MFRC522_SO); 
0146:  BSF    03.5
0147:  BSF    05.3
0148:  MOVLW  00
0149:  BCF    03.5
014A:  BTFSC  05.3
014B:  MOVLW  01
014C:  IORWF  51,F
....................       output_bit (MFRC522_SCK, 0); 
014D:  BCF    05.1
014E:  BSF    03.5
014F:  BCF    05.1
0150:  BCF    03.5
0151:  DECF   4F,F
0152:  GOTO   13D
....................    } 
....................  
....................    
....................    output_bit (MFRC522_CS, 1); 
0153:  BSF    05.0
0154:  BSF    03.5
0155:  BCF    05.0
....................    output_bit (MFRC522_SCK, 1); 
0156:  BCF    03.5
0157:  BSF    05.1
0158:  BSF    03.5
0159:  BCF    05.1
....................    RETURN ucResult; 
015A:  BCF    03.5
015B:  MOVF   51,W
015C:  MOVWF  78
015D:  RETURN
.................... } 
....................  
.................... void MFRC522_Wr(unsigned int8 Address, unsigned int8 value) 
.................... { 
....................    
....................    unsigned int8 i, ucAddr; 
....................    output_bit (MFRC522_SCK, 0); 
*
00C4:  BCF    05.1
00C5:  BSF    03.5
00C6:  BCF    05.1
....................    output_bit (MFRC522_CS, 0); 
00C7:  BCF    03.5
00C8:  BCF    05.0
00C9:  BSF    03.5
00CA:  BCF    05.0
....................    ucAddr = ( (Address<<1)&0x7E); 
00CB:  BCF    03.0
00CC:  BCF    03.5
00CD:  RLF    4F,W
00CE:  ANDLW  7E
00CF:  MOVWF  52
....................    FOR (i = 8; i > 0; i--) 
00D0:  MOVLW  08
00D1:  MOVWF  51
00D2:  MOVF   51,F
00D3:  BTFSC  03.2
00D4:  GOTO   0EC
....................    { 
....................       output_bit (MFRC522_SI, ( (ucAddr&0x80) == 0x80)); 
00D5:  MOVF   52,W
00D6:  ANDLW  80
00D7:  SUBLW  80
00D8:  BTFSC  03.2
00D9:  GOTO   0DC
00DA:  BCF    05.2
00DB:  GOTO   0DD
00DC:  BSF    05.2
00DD:  BSF    03.5
00DE:  BCF    05.2
....................       output_bit (MFRC522_SCK, 1); 
00DF:  BCF    03.5
00E0:  BSF    05.1
00E1:  BSF    03.5
00E2:  BCF    05.1
....................       ucAddr <<= 1; 
00E3:  BCF    03.0
00E4:  BCF    03.5
00E5:  RLF    52,F
....................       output_bit (MFRC522_SCK, 0); 
00E6:  BCF    05.1
00E7:  BSF    03.5
00E8:  BCF    05.1
00E9:  BCF    03.5
00EA:  DECF   51,F
00EB:  GOTO   0D2
....................    } 
....................  
....................    
....................    FOR (i = 8; i > 0; i--) 
00EC:  MOVLW  08
00ED:  MOVWF  51
00EE:  MOVF   51,F
00EF:  BTFSC  03.2
00F0:  GOTO   108
....................    { 
....................       output_bit (MFRC522_SI, ( (value&0x80) == 0x80)); 
00F1:  MOVF   50,W
00F2:  ANDLW  80
00F3:  SUBLW  80
00F4:  BTFSC  03.2
00F5:  GOTO   0F8
00F6:  BCF    05.2
00F7:  GOTO   0F9
00F8:  BSF    05.2
00F9:  BSF    03.5
00FA:  BCF    05.2
....................       output_bit (MFRC522_SCK, 1); 
00FB:  BCF    03.5
00FC:  BSF    05.1
00FD:  BSF    03.5
00FE:  BCF    05.1
....................       value <<= 1; 
00FF:  BCF    03.0
0100:  BCF    03.5
0101:  RLF    50,F
....................       output_bit (MFRC522_SCK, 0); 
0102:  BCF    05.1
0103:  BSF    03.5
0104:  BCF    05.1
0105:  BCF    03.5
0106:  DECF   51,F
0107:  GOTO   0EE
....................    } 
....................  
....................    output_bit (MFRC522_CS, 1); 
0108:  BSF    05.0
0109:  BSF    03.5
010A:  BCF    05.0
....................    output_bit (MFRC522_SCK, 1); 
010B:  BCF    03.5
010C:  BSF    05.1
010D:  BSF    03.5
010E:  BCF    05.1
010F:  BCF    03.5
0110:  RETURN
.................... } 
.................... static void MFRC522_Clear_Bit( char addr, char mask ) 
*
015E:  CLRF   4D
.................... {     unsigned int8  tmp =0x0; 
....................       tmp=MFRC522_Rd( addr ) ; 
015F:  MOVF   4B,W
0160:  MOVWF  4E
0161:  CALL   111
0162:  MOVF   78,W
0163:  MOVWF  4D
....................      MFRC522_Wr( addr,  tmp&~mask );    
0164:  MOVF   4C,W
0165:  XORLW  FF
0166:  ANDWF  4D,W
0167:  MOVWF  4E
0168:  MOVF   4B,W
0169:  MOVWF  4F
016A:  MOVF   4E,W
016B:  MOVWF  50
016C:  CALL   0C4
016D:  RETURN
.................... } 
.................... static void MFRC522_Set_Bit( char addr, char mask ) 
016E:  CLRF   4D
.................... {    unsigned int8  tmp =0x0; 
....................       tmp=MFRC522_Rd( addr ) ;  
016F:  MOVF   4B,W
0170:  MOVWF  4E
0171:  CALL   111
0172:  MOVF   78,W
0173:  MOVWF  4D
....................      MFRC522_Wr( addr, tmp|mask ); 
0174:  MOVF   4D,W
0175:  IORWF  4C,W
0176:  MOVWF  4E
0177:  MOVF   4B,W
0178:  MOVWF  4F
0179:  MOVF   4E,W
017A:  MOVWF  50
017B:  CALL   0C4
017C:  RETURN
.................... } 
.................... void MFRC522_Reset() 
.................... {  
....................    output_bit (MFRC522_RST, 1) ; 
*
0184:  BCF    03.5
0185:  BSF    05.4
0186:  BSF    03.5
0187:  BCF    05.4
....................    delay_us (1); 
0188:  GOTO   189
0189:  GOTO   18A
018A:  NOP
....................    output_bit (MFRC522_RST, 0) ; 
018B:  BCF    03.5
018C:  BCF    05.4
018D:  BSF    03.5
018E:  BCF    05.4
....................    delay_us (1); 
018F:  GOTO   190
0190:  GOTO   191
0191:  NOP
....................    output_bit (MFRC522_RST, 1) ; 
0192:  BCF    03.5
0193:  BSF    05.4
0194:  BSF    03.5
0195:  BCF    05.4
....................    delay_us (1); 
0196:  GOTO   197
0197:  GOTO   198
0198:  NOP
....................    MFRC522_Wr( COMMANDREG, PCD_RESETPHASE ); 
0199:  MOVLW  01
019A:  BCF    03.5
019B:  MOVWF  4F
019C:  MOVLW  0F
019D:  MOVWF  50
019E:  CALL   0C4
....................    delay_us (1); 
019F:  GOTO   1A0
01A0:  GOTO   1A1
01A1:  NOP
.................... } 
.................... void MFRC522_AntennaOn() 
.................... {                                               
.................... unsigned int8 stt; 
.................... stt= MFRC522_Rd( TXCONTROLREG ) ; 
*
01C4:  MOVLW  14
01C5:  MOVWF  4E
01C6:  CALL   111
01C7:  MOVF   78,W
01C8:  MOVWF  34
.................... MFRC522_Set_Bit( TXCONTROLREG, 0x03 ); 
01C9:  MOVLW  14
01CA:  MOVWF  4B
01CB:  MOVLW  03
01CC:  MOVWF  4C
01CD:  CALL   16E
.................... } 
.................... void MFRC522_AntennaOff() 
.................... { 
.................... MFRC522_Clear_Bit( TXCONTROLREG, 0x03 );                                           
*
01BF:  MOVLW  14
01C0:  MOVWF  4B
01C1:  MOVLW  03
01C2:  MOVWF  4C
01C3:  CALL   15E
.................... } 
.................... void MFRC522_Init()      
.................... { 
....................                                                               
....................     output_bit(MFRC522_CS , 1);  
*
017D:  BSF    05.0
017E:  BSF    03.5
017F:  BCF    05.0
....................     output_bit( MFRC522_RST , 1); 
0180:  BCF    03.5
0181:  BSF    05.4
0182:  BSF    03.5
0183:  BCF    05.4
....................     
....................      MFRC522_Reset();        
....................      MFRC522_Wr( TMODEREG, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler 
*
01A2:  MOVLW  2A
01A3:  MOVWF  4F
01A4:  MOVLW  8D
01A5:  MOVWF  50
01A6:  CALL   0C4
....................      MFRC522_Wr( TPRESCALERREG, 0x3E ); //TModeReg[3..0] + TPrescalerReg 
01A7:  MOVLW  2B
01A8:  MOVWF  4F
01A9:  MOVLW  3E
01AA:  MOVWF  50
01AB:  CALL   0C4
....................      MFRC522_Wr( TRELOADREGL, 30 ); 
01AC:  MOVLW  2D
01AD:  MOVWF  4F
01AE:  MOVLW  1E
01AF:  MOVWF  50
01B0:  CALL   0C4
....................      MFRC522_Wr( TRELOADREGH, 0 );  
01B1:  MOVLW  2C
01B2:  MOVWF  4F
01B3:  CLRF   50
01B4:  CALL   0C4
....................      MFRC522_Wr( TXAUTOREG, 0x40 );    //100%ASK 
01B5:  MOVLW  15
01B6:  MOVWF  4F
01B7:  MOVLW  40
01B8:  MOVWF  50
01B9:  CALL   0C4
....................      MFRC522_Wr( MODEREG, 0x3D );      // CRC valor inicial de 0x6363 
01BA:  MOVLW  11
01BB:  MOVWF  4F
01BC:  MOVLW  3D
01BD:  MOVWF  50
01BE:  CALL   0C4
....................         
....................    
....................      MFRC522_AntennaOff() ;             
....................      MFRC522_AntennaOn(); 
*
01CE:  BCF    0A.3
01CF:  BCF    0A.4
01D0:  GOTO   48D (RETURN)
.................... } 
.................... char MFRC522_ToCard( char command, char *sendData, char sendLen, char *backData, unsigned *backLen ) 
*
025D:  MOVLW  02
025E:  MOVWF  45
025F:  CLRF   46
0260:  CLRF   47
.................... { 
....................   char _status = MI_ERR; 
....................   char irqEn = 0x00; 
....................   char waitIRq = 0x00;                
....................   char lastBits; 
....................   char n; 
....................   unsigned i; 
....................   
....................   switch (command) 
0261:  MOVF   3D,W
0262:  XORLW  0E
0263:  BTFSC  03.2
0264:  GOTO   269
0265:  XORLW  02
0266:  BTFSC  03.2
0267:  GOTO   26E
0268:  GOTO   273
....................   { 
....................     case PCD_AUTHENT:       //Certification cards close 
....................     { 
....................       irqEn = 0x12; 
0269:  MOVLW  12
026A:  MOVWF  46
....................       waitIRq = 0x10; 
026B:  MOVLW  10
026C:  MOVWF  47
....................       break; 
026D:  GOTO   273
....................     } 
....................     case PCD_TRANSCEIVE:    //Transmit FIFO data 
....................     { 
....................       irqEn = 0x77; 
026E:  MOVLW  77
026F:  MOVWF  46
....................       waitIRq = 0x30; 
0270:  MOVLW  30
0271:  MOVWF  47
....................       break; 
0272:  GOTO   273
....................     } 
....................     default: 
....................       break; 
....................   } 
....................   MFRC522_Wr( COMMIENREG, irqEn | 0x80 );  //Interrupt request 
0273:  MOVF   46,W
0274:  IORLW  80
0275:  MOVWF  4B
0276:  MOVLW  02
0277:  MOVWF  4F
0278:  MOVF   4B,W
0279:  MOVWF  50
027A:  CALL   0C4
....................   MFRC522_Clear_Bit( COMMIRQREG, 0x80 );   //Clear all interrupt request bit 
027B:  MOVLW  04
027C:  MOVWF  4B
027D:  MOVLW  80
027E:  MOVWF  4C
027F:  CALL   15E
....................   MFRC522_Set_Bit( FIFOLEVELREG, 0x80 );   //FlushBuffer=1, FIFO Initialization 
0280:  MOVLW  0A
0281:  MOVWF  4B
0282:  MOVLW  80
0283:  MOVWF  4C
0284:  CALL   16E
....................   MFRC522_Wr( COMMANDREG, PCD_IDLE );      //NO action; Cancel the current command??? 
0285:  MOVLW  01
0286:  MOVWF  4F
0287:  CLRF   50
0288:  CALL   0C4
....................   
....................   
....................   
....................   
....................   for ( i=0; i < sendLen; i++ ) 
0289:  CLRF   4A
028A:  MOVF   40,W
028B:  SUBWF  4A,W
028C:  BTFSC  03.0
028D:  GOTO   29D
....................   { 
....................     MFRC522_Wr( FIFODATAREG, sendData[i] ); 
028E:  MOVF   4A,W
028F:  ADDWF  3E,W
0290:  MOVWF  04
0291:  BCF    03.7
0292:  BTFSC  3F.0
0293:  BSF    03.7
0294:  MOVF   00,W
0295:  MOVWF  4B
0296:  MOVLW  09
0297:  MOVWF  4F
0298:  MOVF   4B,W
0299:  MOVWF  50
029A:  CALL   0C4
029B:  INCF   4A,F
029C:  GOTO   28A
....................   } 
....................   
....................   MFRC522_Wr( COMMANDREG, command ); 
029D:  MOVLW  01
029E:  MOVWF  4F
029F:  MOVF   3D,W
02A0:  MOVWF  50
02A1:  CALL   0C4
....................   if (command == PCD_TRANSCEIVE ) 
02A2:  MOVF   3D,W
02A3:  SUBLW  0C
02A4:  BTFSS  03.2
02A5:  GOTO   2AB
....................   { 
....................     MFRC522_Set_Bit( BITFRAMINGREG, 0x80 ); //StartSend=1,transmission of data starts  
02A6:  MOVLW  0D
02A7:  MOVWF  4B
02A8:  MOVLW  80
02A9:  MOVWF  4C
02AA:  CALL   16E
....................   } 
....................   
....................   i = 0xFFFF;   
02AB:  MOVLW  FF
02AC:  MOVWF  4A
....................   do 
....................   { 
....................   
....................     n = MFRC522_Rd( COMMIRQREG ); 
02AD:  MOVLW  04
02AE:  MOVWF  4E
02AF:  CALL   111
02B0:  MOVF   78,W
02B1:  MOVWF  49
....................     i--; 
02B2:  DECF   4A,F
....................   } 
....................   while ( i && !(n & 0x01) && !( n & waitIRq ) ); 
02B3:  MOVF   4A,F
02B4:  BTFSC  03.2
02B5:  GOTO   2BC
02B6:  BTFSC  49.0
02B7:  GOTO   2BC
02B8:  MOVF   49,W
02B9:  ANDWF  47,W
02BA:  BTFSC  03.2
02BB:  GOTO   2AD
....................   MFRC522_Clear_Bit( BITFRAMINGREG, 0x80 );    
02BC:  MOVLW  0D
02BD:  MOVWF  4B
02BE:  MOVLW  80
02BF:  MOVWF  4C
02C0:  CALL   15E
....................   if (i != 0) 
02C1:  MOVF   4A,F
02C2:  BTFSC  03.2
02C3:  GOTO   334
....................   { 
....................     if( !( MFRC522_Rd( ERRORREG ) & 0x1B ) ) 
02C4:  MOVLW  06
02C5:  MOVWF  4E
02C6:  CALL   111
02C7:  MOVF   78,W
02C8:  ANDLW  1B
02C9:  BTFSS  03.2
02CA:  GOTO   332
....................     { 
....................       _status = MI_OK; 
02CB:  CLRF   45
....................       if ( n & irqEn & 0x01 ) 
02CC:  MOVF   49,W
02CD:  ANDWF  46,W
02CE:  ANDLW  01
02CF:  BTFSC  03.2
02D0:  GOTO   2D3
....................       { 
....................         _status = MI_NOTAGERR;       
02D1:  MOVLW  01
02D2:  MOVWF  45
....................       } 
....................       if ( command == PCD_TRANSCEIVE ) 
02D3:  MOVF   3D,W
02D4:  SUBLW  0C
02D5:  BTFSS  03.2
02D6:  GOTO   331
....................       { 
....................         n = MFRC522_Rd( FIFOLEVELREG ); 
02D7:  MOVLW  0A
02D8:  MOVWF  4E
02D9:  CALL   111
02DA:  MOVF   78,W
02DB:  MOVWF  49
....................         lastBits = MFRC522_Rd( CONTROLREG ) & 0x07; 
02DC:  MOVLW  0C
02DD:  MOVWF  4E
02DE:  CALL   111
02DF:  MOVF   78,W
02E0:  ANDLW  07
02E1:  MOVWF  48
....................         if (lastBits) 
02E2:  MOVF   48,F
02E3:  BTFSC  03.2
02E4:  GOTO   2F6
....................         { 
....................           *backLen = (n-1) * 8 + lastBits; 
02E5:  MOVF   43,W
02E6:  MOVWF  04
02E7:  BCF    03.7
02E8:  BTFSC  44.0
02E9:  BSF    03.7
02EA:  MOVLW  01
02EB:  SUBWF  49,W
02EC:  MOVWF  77
02ED:  RLF    77,F
02EE:  RLF    77,F
02EF:  RLF    77,F
02F0:  MOVLW  F8
02F1:  ANDWF  77,F
02F2:  MOVF   77,W
02F3:  ADDWF  48,W
02F4:  MOVWF  00
....................         } 
02F5:  GOTO   303
....................         else 
....................         { 
....................           *backLen = n * 8; 
02F6:  MOVF   43,W
02F7:  MOVWF  04
02F8:  BCF    03.7
02F9:  BTFSC  44.0
02FA:  BSF    03.7
02FB:  RLF    49,W
02FC:  MOVWF  77
02FD:  RLF    77,F
02FE:  RLF    77,F
02FF:  MOVLW  F8
0300:  ANDWF  77,F
0301:  MOVF   77,W
0302:  MOVWF  00
....................         } 
....................         if (n == 0) 
0303:  MOVF   49,F
0304:  BTFSS  03.2
0305:  GOTO   308
....................         { 
....................           n = 1; 
0306:  MOVLW  01
0307:  MOVWF  49
....................         } 
....................         if (n > 16) 
0308:  MOVF   49,W
0309:  SUBLW  10
030A:  BTFSC  03.0
030B:  GOTO   30E
....................         { 
....................           n = 16; 
030C:  MOVLW  10
030D:  MOVWF  49
....................         } 
....................        
....................         for (i=0; i < n; i++) 
030E:  CLRF   4A
030F:  MOVF   49,W
0310:  SUBWF  4A,W
0311:  BTFSC  03.0
0312:  GOTO   32A
....................         { 
....................           backData[i] = MFRC522_Rd( FIFODATAREG ); 
0313:  MOVF   4A,W
0314:  ADDWF  41,W
0315:  MOVWF  78
0316:  MOVF   42,W
0317:  MOVWF  7A
0318:  BTFSC  03.0
0319:  INCF   7A,F
031A:  MOVF   78,W
031B:  MOVWF  4B
031C:  MOVF   7A,W
031D:  MOVWF  4C
031E:  MOVLW  09
031F:  MOVWF  4E
0320:  CALL   111
0321:  MOVF   4B,W
0322:  MOVWF  04
0323:  BCF    03.7
0324:  BTFSC  4C.0
0325:  BSF    03.7
0326:  MOVF   78,W
0327:  MOVWF  00
0328:  INCF   4A,F
0329:  GOTO   30F
....................         } 
....................   
....................   backData[i] = 0; 
032A:  MOVF   4A,W
032B:  ADDWF  41,W
032C:  MOVWF  04
032D:  BCF    03.7
032E:  BTFSC  42.0
032F:  BSF    03.7
0330:  CLRF   00
....................       } 
....................     } 
0331:  GOTO   334
....................     else 
....................     { 
....................       _status = MI_ERR; 
0332:  MOVLW  02
0333:  MOVWF  45
....................     } 
....................   } 
....................   
....................   return _status; 
0334:  MOVF   45,W
0335:  MOVWF  78
0336:  RETURN
.................... } 
.................... char MFRC522_Request( char reqMode, char *TagType ) 
.................... { 
....................   char _status; 
....................   unsigned backBits;            
....................   MFRC522_Wr( BITFRAMINGREG, 0x07 ); 
*
033D:  MOVLW  0D
033E:  MOVWF  4F
033F:  MOVLW  07
0340:  MOVWF  50
0341:  CALL   0C4
....................   TagType[0] = reqMode; 
0342:  MOVF   37,W
0343:  MOVWF  04
0344:  BCF    03.7
0345:  BTFSC  38.0
0346:  BSF    03.7
0347:  MOVF   36,W
0348:  MOVWF  00
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, TagType, 1, TagType, &backBits ); 
0349:  MOVLW  0C
034A:  MOVWF  3D
034B:  MOVF   38,W
034C:  MOVWF  3F
034D:  MOVF   37,W
034E:  MOVWF  3E
034F:  MOVLW  01
0350:  MOVWF  40
0351:  MOVF   38,W
0352:  MOVWF  42
0353:  MOVF   37,W
0354:  MOVWF  41
0355:  CLRF   44
0356:  MOVLW  3A
0357:  MOVWF  43
0358:  CALL   25D
0359:  MOVF   78,W
035A:  MOVWF  39
....................   if ( (_status != MI_OK) || (backBits != 0x10) ) 
035B:  MOVF   39,F
035C:  BTFSS  03.2
035D:  GOTO   362
035E:  MOVF   3A,W
035F:  SUBLW  10
0360:  BTFSC  03.2
0361:  GOTO   364
....................   { 
....................     _status = MI_ERR; 
0362:  MOVLW  02
0363:  MOVWF  39
....................   } 
....................   return _status; 
0364:  MOVF   39,W
0365:  MOVWF  78
.................... } 
.................... void MFRC522_CRC( char *dataIn, char length, char *dataOut ) 
.................... { 
.................... char i, n; 
....................     MFRC522_Clear_Bit( DIVIRQREG, 0x04 ); 
....................     MFRC522_Set_Bit( FIFOLEVELREG, 0x80 );    
....................     
....................      
....................     for ( i = 0; i < length; i++ ) 
....................     {   
....................         MFRC522_Wr( FIFODATAREG, *dataIn++ );   
....................     } 
....................     
....................     MFRC522_Wr( COMMANDREG, PCD_CALCCRC ); 
....................         
....................     i = 0xFF; 
....................   
....................     do 
....................     { 
....................         n = MFRC522_Rd( DIVIRQREG ); 
....................         i--; 
....................     } 
....................     while( i && !(n & 0x04) );        //CRCIrq = 1 
....................         
....................     dataOut[0] = MFRC522_Rd( CRCRESULTREGL ); 
....................     dataOut[1] = MFRC522_Rd( CRCRESULTREGM );        
.................... } 
.................... char MFRC522_SelectTag( char *serNum ) 
.................... { 
....................   char i; 
....................   char _status; 
....................   char size; 
....................   unsigned recvBits; 
....................   char buffer[9]; 
....................   
....................   
....................   
....................   buffer[0] = PICC_SElECTTAG; 
....................   buffer[1] = 0x70; 
....................   
....................   for ( i=2; i < 7; i++ ) 
....................   { 
....................     buffer[i] = *serNum++; 
....................   } 
....................   
....................   MFRC522_CRC( buffer, 7, &buffer[7] );             
....................   
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits ); 
....................   if ( (_status == MI_OK) && (recvBits == 0x18) ) 
....................   { 
....................     size = buffer[0]; 
....................   } 
....................   else 
....................   { 
....................     size = 0; 
....................   } 
....................   return size; 
.................... } 
.................... //hibernation 
.................... void MFRC522_Halt() 
.................... { 
....................   unsigned unLen; 
....................   char buff[4]; 
....................   
....................   buff[0] = PICC_HALT; 
....................   buff[1] = 0; 
....................   MFRC522_CRC( buff, 2, &buff[2] ); 
....................   MFRC522_Clear_Bit( STATUS2REG, 0x80 ); 
....................   MFRC522_ToCard( PCD_TRANSCEIVE, buff, 4, buff, &unLen ); 
....................   MFRC522_Clear_Bit( STATUS2REG, 0x08 ); 
.................... } 
....................  
.................... char MFRC522_AntiColl( char *serNum ) 
*
0376:  CLRF   3B
.................... { 
....................   char _status; 
....................   char i; 
....................   char serNumCheck = 0; 
....................   unsigned unLen; 
....................   MFRC522_Wr( BITFRAMINGREG, 0x00 );                //TxLastBists = BitFramingReg[2..0] 
0377:  MOVLW  0D
0378:  MOVWF  4F
0379:  CLRF   50
037A:  CALL   0C4
....................   serNum[0] = PICC_ANTICOLL; 
037B:  MOVF   37,W
037C:  MOVWF  04
037D:  BCF    03.7
037E:  BTFSC  38.0
037F:  BSF    03.7
0380:  MOVLW  93
0381:  MOVWF  00
....................   serNum[1] = 0x20; 
0382:  MOVLW  01
0383:  ADDWF  37,W
0384:  MOVWF  04
0385:  BCF    03.7
0386:  BTFSC  38.0
0387:  BSF    03.7
0388:  MOVLW  20
0389:  MOVWF  00
....................   MFRC522_Clear_Bit( STATUS2REG, 0x08 ); 
038A:  MOVLW  08
038B:  MOVWF  4B
038C:  MOVWF  4C
038D:  CALL   15E
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, serNum, 2, serNum, &unLen ); 
038E:  MOVLW  0C
038F:  MOVWF  3D
0390:  MOVF   38,W
0391:  MOVWF  3F
0392:  MOVF   37,W
0393:  MOVWF  3E
0394:  MOVLW  02
0395:  MOVWF  40
0396:  MOVF   38,W
0397:  MOVWF  42
0398:  MOVF   37,W
0399:  MOVWF  41
039A:  CLRF   44
039B:  MOVLW  3C
039C:  MOVWF  43
039D:  CALL   25D
039E:  MOVF   78,W
039F:  MOVWF  39
....................   if (_status == MI_OK) 
03A0:  MOVF   39,F
03A1:  BTFSS  03.2
03A2:  GOTO   3BE
....................   { 
....................     for ( i=0; i < 4; i++ ) 
03A3:  CLRF   3A
03A4:  MOVF   3A,W
03A5:  SUBLW  03
03A6:  BTFSS  03.0
03A7:  GOTO   3B2
....................     { 
....................       serNumCheck ^= serNum[i]; 
03A8:  MOVF   3A,W
03A9:  ADDWF  37,W
03AA:  MOVWF  04
03AB:  BCF    03.7
03AC:  BTFSC  38.0
03AD:  BSF    03.7
03AE:  MOVF   00,W
03AF:  XORWF  3B,F
03B0:  INCF   3A,F
03B1:  GOTO   3A4
....................     } 
....................     
....................     if ( serNumCheck != serNum[4] ) 
03B2:  MOVLW  04
03B3:  ADDWF  37,W
03B4:  MOVWF  04
03B5:  BCF    03.7
03B6:  BTFSC  38.0
03B7:  BSF    03.7
03B8:  MOVF   00,W
03B9:  SUBWF  3B,W
03BA:  BTFSC  03.2
03BB:  GOTO   3BE
....................     { 
....................       _status = MI_ERR; 
03BC:  MOVLW  02
03BD:  MOVWF  39
....................     } 
....................   } 
....................   return _status; 
03BE:  MOVF   39,W
03BF:  MOVWF  78
.................... } 
....................  
.................... char MFRC522_isCard( char *TagType ) 
.................... { 
....................     if (MFRC522_Request( PICC_REQIDL, TagType ) == MI_OK) 
*
0337:  MOVLW  26
0338:  MOVWF  36
0339:  MOVF   35,W
033A:  MOVWF  38
033B:  MOVF   34,W
033C:  MOVWF  37
*
0366:  MOVF   78,F
0367:  BTFSS  03.2
0368:  GOTO   36D
....................         return 1; 
0369:  MOVLW  01
036A:  MOVWF  78
036B:  GOTO   36F
036C:  GOTO   36F
....................     else 
....................         return 0; 
036D:  MOVLW  00
036E:  MOVWF  78
036F:  BCF    0A.3
0370:  BCF    0A.4
0371:  GOTO   4A1 (RETURN)
.................... } 
.................... char MFRC522_ReadCardSerial( char *str ) 
.................... { 
.................... char _status; 
.................... _status = MFRC522_AntiColl( str ); 
0372:  MOVF   35,W
0373:  MOVWF  38
0374:  MOVF   34,W
0375:  MOVWF  37
*
03C0:  MOVF   78,W
03C1:  MOVWF  36
.................... str[5] = 0; 
03C2:  MOVLW  05
03C3:  ADDWF  34,W
03C4:  MOVWF  04
03C5:  BCF    03.7
03C6:  BTFSC  35.0
03C7:  BSF    03.7
03C8:  CLRF   00
.................... if (_status == MI_OK) 
03C9:  MOVF   36,F
03CA:  BTFSS  03.2
03CB:  GOTO   3D0
....................   return 1; 
03CC:  MOVLW  01
03CD:  MOVWF  78
03CE:  GOTO   3D2
03CF:  GOTO   3D2
.................... else 
....................   return 0; 
03D0:  MOVLW  00
03D1:  MOVWF  78
03D2:  BCF    0A.3
03D3:  BCF    0A.4
03D4:  GOTO   4A8 (RETURN)
.................... } 
....................  
.................... int MFRC522_Compare_UID(char* l, char* u) 
.................... { 
....................    if(l[0]==u[0] && l[1]==u[1] && l[2]==u[2] && l[3]==u[3]){ 
*
0400:  MOVF   34,W
0401:  MOVWF  04
0402:  BCF    03.7
0403:  BTFSC  35.0
0404:  BSF    03.7
0405:  MOVF   00,W
0406:  MOVWF  38
0407:  MOVF   36,W
0408:  MOVWF  04
0409:  BCF    03.7
040A:  BTFSC  37.0
040B:  BSF    03.7
040C:  MOVF   00,W
040D:  SUBWF  38,W
040E:  BTFSS  03.2
040F:  GOTO   44A
0410:  MOVLW  01
0411:  ADDWF  34,W
0412:  MOVWF  04
0413:  BCF    03.7
0414:  BTFSC  35.0
0415:  BSF    03.7
0416:  MOVF   00,W
0417:  MOVWF  38
0418:  MOVLW  01
0419:  ADDWF  36,W
041A:  MOVWF  04
041B:  BCF    03.7
041C:  BTFSC  37.0
041D:  BSF    03.7
041E:  MOVF   00,W
041F:  SUBWF  38,W
0420:  BTFSS  03.2
0421:  GOTO   44A
0422:  MOVLW  02
0423:  ADDWF  34,W
0424:  MOVWF  04
0425:  BCF    03.7
0426:  BTFSC  35.0
0427:  BSF    03.7
0428:  MOVF   00,W
0429:  MOVWF  38
042A:  MOVLW  02
042B:  ADDWF  36,W
042C:  MOVWF  04
042D:  BCF    03.7
042E:  BTFSC  37.0
042F:  BSF    03.7
0430:  MOVF   00,W
0431:  SUBWF  38,W
0432:  BTFSS  03.2
0433:  GOTO   44A
0434:  MOVLW  03
0435:  ADDWF  34,W
0436:  MOVWF  04
0437:  BCF    03.7
0438:  BTFSC  35.0
0439:  BSF    03.7
043A:  MOVF   00,W
043B:  MOVWF  38
043C:  MOVLW  03
043D:  ADDWF  36,W
043E:  MOVWF  04
043F:  BCF    03.7
0440:  BTFSC  37.0
0441:  BSF    03.7
0442:  MOVF   00,W
0443:  SUBWF  38,W
0444:  BTFSS  03.2
0445:  GOTO   44A
....................       return 1; 
0446:  MOVLW  01
0447:  MOVWF  78
0448:  GOTO   44C
....................    }else{ 
0449:  GOTO   44C
....................       return 0; 
044A:  MOVLW  00
044B:  MOVWF  78
....................    } 
044C:  RETURN
.................... } 
....................  
.................... void MFRC522_Clear_UID(char* u_i) 
.................... { 
....................   for(int j=0; j<10; j++) 
044D:  CLRF   36
044E:  MOVF   36,W
044F:  SUBLW  09
0450:  BTFSS  03.0
0451:  GOTO   45B
....................   { 
....................     u_i[j] = 0; 
0452:  MOVF   36,W
0453:  ADDWF  34,W
0454:  MOVWF  04
0455:  BCF    03.7
0456:  BTFSC  35.0
0457:  BSF    03.7
0458:  CLRF   00
0459:  INCF   36,F
045A:  GOTO   44E
....................   } 
045B:  BCF    0A.3
045C:  BCF    0A.4
045D:  GOTO   542 (RETURN)
.................... } 
....................  
.................... #include <LCD_16X2.c>                            
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
0040:  BTFSC  3F.0
0041:  GOTO   044
0042:  BCF    08.4
0043:  GOTO   045
0044:  BSF    08.4
0045:  BSF    03.5
0046:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
0047:  BCF    03.5
0048:  BTFSC  3F.1
0049:  GOTO   04C
004A:  BCF    08.5
004B:  GOTO   04D
004C:  BSF    08.5
004D:  BSF    03.5
004E:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
004F:  BCF    03.5
0050:  BTFSC  3F.2
0051:  GOTO   054
0052:  BCF    08.6
0053:  GOTO   055
0054:  BSF    08.6
0055:  BSF    03.5
0056:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
0057:  BCF    03.5
0058:  BTFSC  3F.3
0059:  GOTO   05C
005A:  BCF    08.7
005B:  GOTO   05D
005C:  BSF    08.7
005D:  BSF    03.5
005E:  BCF    08.7
....................  
....................  delay_cycles(1); 
005F:  NOP
....................  output_high(LCD_E); 
0060:  BCF    08.3
0061:  BCF    03.5
0062:  BSF    08.3
....................  delay_us(2); 
0063:  MOVLW  02
0064:  MOVWF  77
0065:  DECFSZ 77,F
0066:  GOTO   065
0067:  GOTO   068
0068:  NOP
....................  output_low(LCD_E); 
0069:  BSF    03.5
006A:  BCF    08.3
006B:  BCF    03.5
006C:  BCF    08.3
006D:  RETURN
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
006E:  BSF    03.5
006F:  BCF    08.2
0070:  BCF    03.5
0071:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0072:  MOVLW  63
0073:  MOVWF  77
0074:  DECFSZ 77,F
0075:  GOTO   074
0076:  GOTO   077
.................... #endif 
....................  
.................... if(address) 
0077:  MOVF   3C,F
0078:  BTFSC  03.2
0079:  GOTO   07F
....................    output_high(LCD_RS); 
007A:  BSF    03.5
007B:  BCF    08.2
007C:  BCF    03.5
007D:  BSF    08.2
007E:  GOTO   083
.................... else 
....................    output_low(LCD_RS); 
007F:  BSF    03.5
0080:  BCF    08.2
0081:  BCF    03.5
0082:  BCF    08.2
....................  
....................  delay_cycles(1); 
0083:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0084:  BSF    03.5
0085:  BCF    08.3
0086:  BCF    03.5
0087:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4); 
0088:  SWAPF  3D,W
0089:  MOVWF  3E
008A:  MOVLW  0F
008B:  ANDWF  3E,F
008C:  MOVF   3E,W
008D:  MOVWF  3F
008E:  CALL   040
.................... lcd_send_nibble(n & 0xf); 
008F:  MOVF   3D,W
0090:  ANDLW  0F
0091:  MOVWF  3E
0092:  MOVWF  3F
0093:  CALL   040
0094:  RETURN
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0095:  BSF    03.5
0096:  BCF    08.2
0097:  BCF    03.5
0098:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0099:  BSF    03.5
009A:  BCF    08.3
009B:  BCF    03.5
009C:  BCF    08.3
....................  
.................... delay_ms(15); 
009D:  MOVLW  0F
009E:  MOVWF  38
009F:  CALL   02C
....................  
.................... for(i=0 ;i < 3; i++) 
00A0:  CLRF   34
00A1:  MOVF   34,W
00A2:  SUBLW  02
00A3:  BTFSS  03.0
00A4:  GOTO   0AD
....................    { 
....................     lcd_send_nibble(0x03); 
00A5:  MOVLW  03
00A6:  MOVWF  3F
00A7:  CALL   040
....................     delay_ms(5); 
00A8:  MOVLW  05
00A9:  MOVWF  38
00AA:  CALL   02C
00AB:  INCF   34,F
00AC:  GOTO   0A1
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
00AD:  MOVLW  02
00AE:  MOVWF  3F
00AF:  CALL   040
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00B0:  CLRF   34
00B1:  MOVF   34,W
00B2:  SUBLW  03
00B3:  BTFSS  03.0
00B4:  GOTO   0C1
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00B5:  MOVF   34,W
00B6:  CALL   004
00B7:  MOVWF  35
00B8:  CLRF   3C
00B9:  MOVF   35,W
00BA:  MOVWF  3D
00BB:  CALL   06E
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
00BC:  MOVLW  05
00BD:  MOVWF  38
00BE:  CALL   02C
....................     #endif 
00BF:  INCF   34,F
00C0:  GOTO   0B1
....................    } 
00C1:  BCF    0A.3
00C2:  BCF    0A.4
00C3:  GOTO   48C (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
01D1:  DECFSZ 39,W
01D2:  GOTO   1D4
01D3:  GOTO   1D7
....................    address = lcd_line_two; 
01D4:  MOVLW  40
01D5:  MOVWF  3A
01D6:  GOTO   1D8
.................... else 
....................    address=0; 
01D7:  CLRF   3A
....................  
.................... address += x-1; 
01D8:  MOVLW  01
01D9:  SUBWF  38,W
01DA:  ADDWF  3A,F
.................... lcd_send_byte(0, 0x80 | address); 
01DB:  MOVF   3A,W
01DC:  IORLW  80
01DD:  MOVWF  3B
01DE:  CLRF   3C
01DF:  MOVF   3B,W
01E0:  MOVWF  3D
01E1:  CALL   06E
01E2:  RETURN
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
01E3:  MOVF   37,W
01E4:  XORLW  0C
01E5:  BTFSC  03.2
01E6:  GOTO   1EE
01E7:  XORLW  06
01E8:  BTFSC  03.2
01E9:  GOTO   1F6
01EA:  XORLW  02
01EB:  BTFSC  03.2
01EC:  GOTO   1FC
01ED:  GOTO   201
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
01EE:  CLRF   3C
01EF:  MOVLW  01
01F0:  MOVWF  3D
01F1:  CALL   06E
....................       delay_ms(2); 
01F2:  MOVLW  02
01F3:  MOVWF  38
01F4:  CALL   02C
....................       break; 
01F5:  GOTO   206
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
01F6:  MOVLW  01
01F7:  MOVWF  38
01F8:  MOVLW  02
01F9:  MOVWF  39
01FA:  CALL   1D1
....................        break; 
01FB:  GOTO   206
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
01FC:  CLRF   3C
01FD:  MOVLW  10
01FE:  MOVWF  3D
01FF:  CALL   06E
....................        break; 
0200:  GOTO   206
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0201:  MOVLW  01
0202:  MOVWF  3C
0203:  MOVF   37,W
0204:  MOVWF  3D
0205:  CALL   06E
....................        break; 
....................    } 
0206:  RETURN
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
.................... void lcd_clear() 
.................... { 
....................   lcd_putc("\f"); 
*
03D5:  MOVLW  0C
03D6:  BSF    03.6
03D7:  MOVWF  0D
03D8:  MOVLW  00
03D9:  MOVWF  0F
03DA:  BCF    03.6
03DB:  CALL   207
03DC:  RETURN
.................... } 
....................  
.................... void send_D7_D4(int8 address_lcd,int8 nibble_lcd) 
.................... {   
....................   if((nibble_lcd & 1)==1) output_high(LCD_DB4); else output_low(LCD_DB4); 
....................   if((nibble_lcd & 2)==2) output_high(LCD_DB5); else output_low(LCD_DB5); 
....................   if((nibble_lcd & 4)==4) output_high(LCD_DB6); else output_low(LCD_DB6); 
....................   if((nibble_lcd & 8)==8) output_high(LCD_DB7); else output_low(LCD_DB7); 
....................    delay_us(60); 
....................    if(address_lcd) 
....................      output_high(LCD_RS); 
....................        
....................    else 
....................      output_low(LCD_RS);  
....................        
....................  output_high(LCD_E); 
....................  delay_us(2); 
....................  output_low(LCD_E); 
.................... } 
....................  
.................... void send_byte_data(int8 address_lcd, int8 n) 
.................... { 
....................    send_D7_D4(address_lcd,n >> 4); 
....................    send_D7_D4(address_lcd,n & 0xf); 
.................... } 
....................  
.................... void CGRAM_putc(int8 n) 
.................... { 
....................    send_byte_data(1,n); 
.................... } 
....................  
.................... void CGRAM_position(int p) 
.................... { 
....................   send_byte_data(0,0x40+p*8); 
.................... } 
....................  
.................... void CGRAM_create_char(char* new_char) 
.................... { 
....................   for(int cg=0; cg<=7;cg++) 
....................   { 
....................     send_byte_data(1,new_char[cg]); 
....................   } 
.................... } 
....................  
....................  
.................... char user_1[4] = {0x6B, 0x3A, 0x45, 0x01};       
*
046A:  MOVLW  6B
046B:  BCF    03.5
046C:  MOVWF  20
046D:  MOVLW  3A
046E:  MOVWF  21
046F:  MOVLW  45
0470:  MOVWF  22
0471:  MOVLW  01
0472:  MOVWF  23
.................... char user_2[4] = {0x43, 0x89, 0x2D, 0x31}; 
0473:  MOVLW  43
0474:  MOVWF  24
0475:  MOVLW  89
0476:  MOVWF  25
0477:  MOVLW  2D
0478:  MOVWF  26
0479:  MOVLW  31
047A:  MOVWF  27
.................... char user_3[4] = {0xAB, 0x60, 0x3B, 0x01}; 
047B:  MOVLW  AB
047C:  MOVWF  28
047D:  MOVLW  60
047E:  MOVWF  29
047F:  MOVLW  3B
0480:  MOVWF  2A
0481:  MOVLW  01
0482:  MOVWF  2B
....................  
.................... char i;                                          
.................... char UID[4];                                    
.................... unsigned int TagType;                           // Variable de verificacion de tag 
....................  
.................... int cardProcessed = 0;                          // Variable de estado de procesamiento de tarjeta 
....................  
.................... void main() 
*
045E:  MOVF   03,W
045F:  ANDLW  1F
0460:  MOVWF  03
0461:  CLRF   32
0462:  BSF    03.5
0463:  BSF    1F.0
0464:  BSF    1F.1
0465:  BSF    1F.2
0466:  BCF    1F.3
0467:  MOVLW  07
0468:  MOVWF  1C
0469:  BCF    03.7
.................... { 
....................    output_low(led_access);                       
*
0483:  BSF    03.5
0484:  BCF    06.0
0485:  BCF    03.5
0486:  BCF    06.0
....................    output_low(led_error); 
0487:  BSF    03.5
0488:  BCF    06.1
0489:  BCF    03.5
048A:  BCF    06.1
....................    lcd_init();                                   
048B:  GOTO   095
....................    MFRC522_Init();                              
048C:  GOTO   17D
....................     
....................    while(true) 
....................    { 
....................       lcd_gotoxy(2,1);                           
048D:  MOVLW  02
048E:  MOVWF  38
048F:  MOVLW  01
0490:  MOVWF  39
0491:  CALL   1D1
....................       lcd_putc("IDENTIFIQUESE"); 
0492:  MOVLW  0D
0493:  BSF    03.6
0494:  MOVWF  0D
0495:  MOVLW  00
0496:  MOVWF  0F
0497:  BCF    03.6
0498:  CALL   207
....................       output_high(led_conf); 
0499:  BSF    03.5
049A:  BCF    06.5
049B:  BCF    03.5
049C:  BSF    06.5
....................        
....................       if(MFRC522_isCard(&TagType)) // Verificación si hay un tag disponible 
049D:  CLRF   35
049E:  MOVLW  31
049F:  MOVWF  34
04A0:  GOTO   337
04A1:  MOVF   78,F
04A2:  BTFSC  03.2
04A3:  GOTO   547
....................       { 
....................          if(MFRC522_ReadCardSerial(&UID))       // Lectura y verificación si encontró algún tag 
04A4:  CLRF   35
04A5:  MOVLW  2D
04A6:  MOVWF  34
04A7:  GOTO   372
04A8:  MOVF   78,F
04A9:  BTFSC  03.2
04AA:  GOTO   546
....................          { 
....................             lcd_clear(); 
04AB:  CALL   3D5
....................             lcd_gotoxy(1,1); 
04AC:  MOVLW  01
04AD:  MOVWF  38
04AE:  MOVWF  39
04AF:  CALL   1D1
....................             lcd_putc("ID: "); 
04B0:  MOVLW  14
04B1:  BSF    03.6
04B2:  MOVWF  0D
04B3:  MOVLW  00
04B4:  MOVWF  0F
04B5:  BCF    03.6
04B6:  CALL   207
....................             lcd_gotoxy(5,1); 
04B7:  MOVLW  05
04B8:  MOVWF  38
04B9:  MOVLW  01
04BA:  MOVWF  39
04BB:  CALL   1D1
....................             for(int i=0; i<4; i++)                  // Imprime la ID en la pantalla LCD 
04BC:  CLRF   33
04BD:  MOVF   33,W
04BE:  SUBLW  03
04BF:  BTFSS  03.0
04C0:  GOTO   4CD
....................             { 
....................                printf(lcd_putc, "%X", UID[i]); 
04C1:  MOVLW  2D
04C2:  ADDWF  33,W
04C3:  MOVWF  04
04C4:  BCF    03.7
04C5:  MOVF   00,W
04C6:  MOVWF  34
04C7:  MOVWF  35
04C8:  MOVLW  37
04C9:  MOVWF  36
04CA:  GOTO   3DD
04CB:  INCF   33,F
04CC:  GOTO   4BD
....................             } 
....................              
....................             if(MFRC522_Compare_UID(UID, user_1) || MFRC522_Compare_UID(UID, user_2) || MFRC522_Compare_UID(UID, user_3))  
04CD:  CLRF   35
04CE:  MOVLW  2D
04CF:  MOVWF  34
04D0:  CLRF   37
04D1:  MOVLW  20
04D2:  MOVWF  36
04D3:  CALL   400
04D4:  MOVF   78,F
04D5:  BTFSS  03.2
04D6:  GOTO   4EB
04D7:  CLRF   35
04D8:  MOVLW  2D
04D9:  MOVWF  34
04DA:  CLRF   37
04DB:  MOVLW  24
04DC:  MOVWF  36
04DD:  CALL   400
04DE:  MOVF   78,F
04DF:  BTFSS  03.2
04E0:  GOTO   4EB
04E1:  CLRF   35
04E2:  MOVLW  2D
04E3:  MOVWF  34
04E4:  CLRF   37
04E5:  MOVLW  28
04E6:  MOVWF  36
04E7:  CALL   400
04E8:  MOVF   78,F
04E9:  BTFSC  03.2
04EA:  GOTO   515
....................             { 
....................                if(!cardProcessed) { 
04EB:  MOVF   32,F
04EC:  BTFSS  03.2
04ED:  GOTO   514
....................                   output_high(led_access); 
04EE:  BSF    03.5
04EF:  BCF    06.0
04F0:  BCF    03.5
04F1:  BSF    06.0
....................                   output_low(led_error); 
04F2:  BSF    03.5
04F3:  BCF    06.1
04F4:  BCF    03.5
04F5:  BCF    06.1
....................                   lcd_gotoxy(1,2); 
04F6:  MOVLW  01
04F7:  MOVWF  38
04F8:  MOVLW  02
04F9:  MOVWF  39
04FA:  CALL   1D1
....................                   lcd_putc("Bienvenido a Estructuras"); 
04FB:  MOVLW  17
04FC:  BSF    03.6
04FD:  MOVWF  0D
04FE:  MOVLW  00
04FF:  MOVWF  0F
0500:  BCF    03.6
0501:  CALL   207
....................                   delay_ms(1000); 
0502:  MOVLW  04
0503:  MOVWF  34
0504:  MOVLW  FA
0505:  MOVWF  38
0506:  CALL   02C
0507:  DECFSZ 34,F
0508:  GOTO   504
....................                   output_low(led_access); 
0509:  BSF    03.5
050A:  BCF    06.0
050B:  BCF    03.5
050C:  BCF    06.0
....................                   output_low(led_error); 
050D:  BSF    03.5
050E:  BCF    06.1
050F:  BCF    03.5
0510:  BCF    06.1
....................                   lcd_clear(); 
0511:  CALL   3D5
....................                   cardProcessed = 1; // Marcar la tarjeta como procesada 
0512:  MOVLW  01
0513:  MOVWF  32
....................                } 
....................             } 
0514:  GOTO   53E
....................             else                                
....................             { 
....................                if(!cardProcessed) { 
0515:  MOVF   32,F
0516:  BTFSS  03.2
0517:  GOTO   53E
....................                   output_high(led_error); 
0518:  BSF    03.5
0519:  BCF    06.1
051A:  BCF    03.5
051B:  BSF    06.1
....................                   output_low(led_access); 
051C:  BSF    03.5
051D:  BCF    06.0
051E:  BCF    03.5
051F:  BCF    06.0
....................                   lcd_gotoxy(1,2); 
0520:  MOVLW  01
0521:  MOVWF  38
0522:  MOVLW  02
0523:  MOVWF  39
0524:  CALL   1D1
....................                   lcd_putc("Acceso Denegado"); 
0525:  MOVLW  24
0526:  BSF    03.6
0527:  MOVWF  0D
0528:  MOVLW  00
0529:  MOVWF  0F
052A:  BCF    03.6
052B:  CALL   207
....................                   delay_ms(1000); 
052C:  MOVLW  04
052D:  MOVWF  34
052E:  MOVLW  FA
052F:  MOVWF  38
0530:  CALL   02C
0531:  DECFSZ 34,F
0532:  GOTO   52E
....................                   output_low(led_access); 
0533:  BSF    03.5
0534:  BCF    06.0
0535:  BCF    03.5
0536:  BCF    06.0
....................                   output_low(led_error); 
0537:  BSF    03.5
0538:  BCF    06.1
0539:  BCF    03.5
053A:  BCF    06.1
....................                   lcd_clear(); 
053B:  CALL   3D5
....................                   cardProcessed = 1; // Marcar la tarjeta como procesada 
053C:  MOVLW  01
053D:  MOVWF  32
....................                } 
....................             } 
....................             MFRC522_Clear_UID(UID);             // Limpia temporalmente la ID 
053E:  CLRF   35
053F:  MOVLW  2D
0540:  MOVWF  34
0541:  GOTO   44D
....................             delay_ms(100); 
0542:  MOVLW  64
0543:  MOVWF  38
0544:  CALL   02C
....................          } 
0545:  GOTO   547
....................          else { 
....................             cardProcessed = 0; // Restablecer el estado si no se detecta ninguna tarjeta 
0546:  CLRF   32
....................          } 
....................       } 
0547:  GOTO   48D
....................    } 
.................... } 
0548:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
